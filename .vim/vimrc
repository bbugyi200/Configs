" ----------------------------------------------------------------------------
" ---------------------------- PLUGINS ---------------------------------------
if filereadable($CONFIG . "/plugins.vim")
	source $CONFIG/plugins.vim
else
	source /home/bryan/Dropbox/dotfiles/extras/plugins.vim
endif

filetype plugin indent on
filetype plugin on

runtime macros/matchit.vim


" ---------------------- GVim/Vim Specific Configs ---------------------------
if has("gui_running")
	colo desert
	cd $HOME
else
	set background=dark
endif

" -------------------------------- SETS --------------------------------------
set clipboard=unnamedplus

set number
set colorcolumn=80
set autoindent
set backspace=2
" set autochdir
set tabstop=4
set shiftwidth=4
set expandtab
set nocompatible

set exrc
set secure

" Allows me to use the mouse
set mouse=a
" An attempt to fix the issue where mouse-clicks cause random output to screen
set ttymouse=sgr

" Allows me to highlight using a colon (:)
set iskeyword+=:

" Search Settings
set incsearch
set ignorecase
set smartcase

" Improves tab completion from normal mode
set wildmenu
set wildmode=full

" 'find' should ignore these folders
set wildignore+=**/__pycache__/**

" Increase command history limit
set history=200

" Always show one line above/below cursor
set scrolloff=1

" Allows you to change buffers without first saving the current buffer
set hidden

" Change default program for :grep to ack
set grepprg=ack\ --nogroup\ --column\ $*
set grepformat=%f:%l:%c:%m

" Autocompletion will only recommend completions that match the typed case
set infercase

set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<,space:␣
set nolist

set cursorline
set cursorcolumn

" Indents wraps
set breakindent

" Disables search highlighting
set nohlsearch

" Changes location of viminfo file
set viminfo+=n~/.vim/viminfo

set noshowmode

" --------------------------------- LETS -------------------------------------

" Appends the current working directory to PATH
let tempPath=expand("%:p:h") . "/**"
exec "set path+=" . tempPath

" Sets LaTeX as default for .tex files
let g:tex_flavor = "latex"

" The <Leader> key can be used for extra mappings
let mapleader = ","
noremap \ ,

" Sets minimum size of active split (by percentage)
" let &winwidth = &columns * 6 / 10
let &winheight = &lines * 6 / 10

" ---------------------------- SYNTAX ----------------------------------------
syntax on
syntax enable
set background=dark
colorscheme solarized

" Enables syntax highlighting to work properly for certain filetypes
au BufRead,BufNewFile *.nasm set filetype=nasm
au BufRead,BufNewFile *.txt set filetype=txt
au BufRead,BufNewFile *.xmobarrc set syntax=haskell

" Used to make syntax highlighting more readable when using Linux
" transparent terminal
highlight Constant ctermfg=lightmagenta 

" ------------------------------- FUNCTIONS ----------------------------------
function! s:VSetSearch(cmdtype)
	let temp = @s
	norm! gv"sy
	let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
	let @s = temp
endfunction

" Automatically creates directory if it does not already exist
" https://stackoverflow.com/questions/4292733/vim-creating-parent-directories-on-save
function s:MkNonExDir(file, buf)
	if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
		let dir=fnamemodify(a:file, ':h')
		if !isdirectory(dir)
			call mkdir(dir, 'p')
		endif
	endif
endfunction
augroup BWCCreateDir
	autocmd!
	autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" ------------------------------ KEY MAPPINGS --------------------------------

" Preserves flags when repeating the last substitute command.
nnoremap & :&&<CR>
xnoremap & :&&<CR>

" Allows for visual search
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

" Allows space to work in Normal-Mode
nnoremap <space> a<space><esc>

" Shortcuts for quiting vim
noremap <Leader>e :quit<CR>

" Shortcuts for saving vim
" NOTE:: Just use ZZ in normal mode to save and quit.
noremap <Leader>s :w<CR>

" Makes enter key work right in Normal mode
nnoremap <CR> o<Esc>

nmap <C-N> :cd %:h<CR>:NERDTree<CR><S-B>
nmap <Leader>p :CtrlPMRU<CR>

nmap <Leader>z :ZoomWin<CR>

nmap <C-g> :Gstatus<CR>


""""""""""""""""""""""""""""""
"  Split and Tab Settings  "
nnoremap <C-j> <C-W><C-J>
nnoremap <C-k> <C-W><C-K>
nnoremap <C-l> <C-W><C-L>
nnoremap <C-h> <C-W><C-H>

""""""""""""""""""""""""""""""

" Will execute the 'Run' command which varies based on the file type
nmap <Leader>r :w<CR>:Run<CR>
imap <Leader>r <Esc><Leader>r

nmap <Leader>R :w<CR>:Run2<CR>
imap <Leader>R <Esc><Leader>R

" Improve up/down movement on wrapped lines
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" Sets tmux pane to the current directory
nnoremap <Leader><F12> :call VimuxRunCommand("cd " .expand("%:p:h") ."&& clear")<CR>

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

" Used to recall commands from history
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" mapping to wrap paragraph
nnoremap <Leader>g gqap

" deletes current file and buffer
nnoremap <C-Del> :call delete(expand('%'))<CR>

nnoremap <C-s> :SyntasticToggleMode<CR>

" Toggles 'cursorline'
nnoremap <Leader>l :set cursorline!<CR>

" Explore Shortcuts
nnoremap <Leader>S :Explore ~/Dropbox/dotfiles/.vim/bundle/vim-snippets/UltiSnips<CR>
nnoremap <Leader>F :Explore ~/Dropbox/dotfiles/.vim/ftplugin<CR>

" Delete Buffers
nnoremap <Leader>d :bp<bar>sp<bar>bn<bar>bd<bar>bn<CR>

" Omnicompletion shortcut
inoremap <C-o> <C-x><C-o>

nnoremap <Leader>n :set relativenumber!<CR>

imap <C-h> <Esc><C-h>
imap <C-l> <Esc><C-l>
imap <C-j> <Esc><C-j>
imap <C-k> <Esc><C-k>

nmap gm :LivedownToggle<CR>

" ------------------------------ AUTOS ---------------------------------------

" Turns spellcheck on for certain file extensions
" 2nd line disables the colorcolumn
autocmd BufRead,BufNewFile *.txt set colorcolumn=
autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us
autocmd BufRead,BufNewFile *.md set colorcolumn=
autocmd BufRead,BufNewFile *.html setlocal spell spelllang=en_us
autocmd BufRead,BufNewFile *.html set colorcolumn=
autocmd BufRead,BufNewFile *.tex setlocal spell spelllang=en_us
autocmd FileType mail setlocal spell spelllang=en_us

" Automatic rewriting of .vimrc
 autocmd! bufwritepost .vimrc source %

" http://stackoverflow.com/questions/16359878/vim-how-to-map-shift-enter
autocmd CmdwinEnter * nnoremap <CR> <CR>
autocmd BufReadPost quickfix nnoremap <CR> <CR>

" Detects mutt filetypes
augroup filetypedetect
  " Mail
  autocmd BufRead,BufNewFile *mutt-*			  setfiletype mail
augroup END

autocmd BufRead,BufNewFile *.tex,*.anki_vim let b:delimitMate_quotes = "\" ' $"

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamecollapse = 0
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_nr_show = 1

" Disables auto-comments on newlines
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" ------------------------- Functions and Commands ---------------------------

" Redraws screen after silent command
command! -nargs=1 Silent
\   execute 'silent !' . <q-args>
\ | execute 'redraw!'

let g:S = 0  "result in global variable S
function! Sum(number)
  let g:S = g:S + a:number
  return a:number
endfunction
