" ############################## VIMRC ##############################
""""""""""""""
"  Settings  "
""""""""""""""
set autoindent
set autoread
set background=dark
set backspace=2
set breakindent  " Indents wraps
set clipboard=unnamedplus
set colorcolumn=100
set completeopt-=preview
set cursorcolumn
set cursorline
set expandtab
set exrc  " Allows Local .vimrc to be loaded
set grepformat=%f:%l:%c:%m
set grepprg=ag\ --nogroup\ --nocolor
set hidden  " Allows you to change buffers without first saving the current buffer
set history=200  " Increase command history limit
set ignorecase
set incsearch
set infercase  " Autocompletion will only recommend completions that match the typed case
set laststatus=2
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<,space:␣
set modeline  " Enables Modeline Magic
set mouse=a  " Allows me to use the mouse
set nocompatible
set nohlsearch  " Disables search highlighting
set nolist
set nrformats+=alpha  " Status Line Settings (mode display)
set number
set scrolloff=5  " Always show N line(s) above/below cursor
set secure
set shiftwidth=4
set smartcase
let &statusline = "%{_StatuslineGit()} %f %m %= %y %p%% %l:%c"
set tabstop=4
set ttymouse=sgr  " An attempt to fix the issue where mouse-clicks cause random output to screen
set tw=99
set undodir=/home/bryan/.vim/undo
set undofile
set viminfo+=n~/.vim/viminfo  " Changes location of viminfo file
set wildignore+=*/__pycache__/*,*/.git/*,*/venv/*  " 'find'/ctrlp should ignore these folders
set wildmenu  " Improves tab completion from normal mode
set wildmode=full

""""""""""""""""""
"  Key Bindings  "
""""""""""""""""""
let mapleader = ","  " The <Leader> key can be used for extra mappings
let maplocalleader = "\\"

" >>> NORMAL
" ----- Numeric -----
nnoremap <Leader>00 :cd %:h<CR>:pwd<CR>
nnoremap <Leader>0cc :execute 'edit' _CookieCutter('c')<CR>
nnoremap <Leader>0s :e /home/bryan/.vim/vim-snippets/<C-R>=&filetype<CR>.snippets<CR>
nnoremap <Leader>0ls :e <C-R>=getcwd()<CR>/<C-R>=&filetype<CR>.snippets<CR>
nnoremap <Leader>0S :e /home/bryan/.vim/vim-snippets/all.snippets<CR>
nnoremap <Leader>0t :n ~/.local/share/cookie/*1.<C-R>=&filetype<CR><CR>
nnoremap <Leader>0T :n ~/.local/share/cookie/*2.<C-R>=&filetype<CR><CR>
nnoremap <Leader>0v :e ~/.vim/ftplugin/<C-R>=&filetype<CR>.vim<CR>| " Edit ftplugin File
nnoremap <Leader>0lv :e <C-R>=getcwd()<CR>/.lvimrc<CR>
" ----- Alphabetic -----
nnoremap <Leader>a :AnsiEsc<CR>
nnoremap <Leader>d :b#<bar>sp<bar>b#<bar>bd<CR>| " Delete Buffer
nnoremap <Leader>D :call _RemoveFile()<CR>
nnoremap <Leader>e :x!<CR> | imap <Leader>e <Esc><Leader>e
nnoremap <Leader>E :xa!<CR> | imap <Leader>E <Esc><Leader>E
nnoremap gd :Gdiff 
nnoremap gj j
nnoremap gk k
nnoremap <Leader>g gqap| " mapping to wrap paragraph
nnoremap j gj
nnoremap k gk
nnoremap <Leader><Leader>S :e /home/bryan/Dropbox/dotfiles/extras/vim-snippets/all.snippets<CR>
nnoremap <Leader>O O<C-u>
nnoremap <Leader>o o<C-u>
nnoremap <Leader>p :CtrlPMRU<CR>
nnoremap <Leader>r :update<CR>:Run<CR>| imap <Leader>r <Esc><Leader>r
nnoremap <Leader>R :update<CR>:Run2<CR>| imap <Leader>R <Esc><Leader>R
nnoremap <Leader><Space> a<Space><Esc>hi<Space><Esc>l| " Put space before and after character under cursor
nnoremap <Leader>s :update<CR>| imap <Leader>s <Esc><Leader>s
nnoremap <LocalLeader>s :w !sudo tee > /dev/null %<CR>
nmap S ys
nnoremap <Leader>v :vert sfind 
nnoremap Y y$
nnoremap <Leader>Y ma^y$`a
" ----- Non-Alphanumeric -----
nnoremap ,.fs :sfind 
nnoremap ,.fv :vert sfind 
nnoremap ,.ft :tabfind 
nnoremap _ :<C-u>execute "sbuffer " . v:count1<CR>
nnoremap \| :<C-u>execute "vert sbuffer " . v:count1<CR>
nnoremap + :<C-u>execute "tab sbuffer " . v:count<CR>
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap - :<C-u>execute "buffer " . v:count1<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap & :&&<CR>| " Preserves flags when repeating the last substitute command.
nnoremap <silent> [w "_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o>:nohlsearch<CR>
nnoremap <silent> ]w "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o>/\w\+\_W\+<CR>:nohlsearch<CR>
" ----- Special Characters -----
" ~ Mouse Events ~
nnoremap <2-LeftMouse> :exe "tag " . expand("<cword>")<CR>
nnoremap <RightMouse> <LeftMouse>""p
map <MiddleMouse> <Nop>
" ~ Miscellaneous ~
nnoremap <Del> :<C-u>execute "bdelete " . v:count<CR>
nnoremap <C-g> :Gstatus<CR>
nnoremap <C-s> :SyntasticToggleMode<CR>
nnoremap <CR> o<Esc>
nnoremap <Leader>/ /\v
nnoremap <Leader>< /\v<><Left>
nnoremap <Space> :ls<CR>
nnoremap <Tab> <C-^>

" >>> INSERT
inoremap <expr> / _InterpretForwardSlash()
imap <C-h> <Esc><C-h>
imap <C-j> <Esc><C-j>
imap <C-k> <Esc><C-k>
imap <C-l> <Esc><C-l>

" >>> VISUAL
vnoremap <silent> <Leader>i :w !ix \| xargs printf "\%s/<C-R>=&filetype<CR>" \| xclip -sel clipboard<CR>
vnoremap <silent> <Leader>.i :w !ix \| xclip -sel clipboard<CR>
vnoremap <Leader>s :sort ri //<Left>
vnoremap <Leader>x <Esc>`.``gvP``P| nmap <Leader>x ve<Leader>x| " Swap highlighted word with last word in buffer
vnoremap <Space> $<Left>
xnoremap # :<C-u>call <SID>_VSetSearch('?')<CR>?<C-R>=@/<CR><CR>
xnoremap * :<C-u>call <SID>_VSetSearch('/')<CR>/<C-R>=@/<CR><CR>| " Allows for visual search
xnoremap & :&&<CR>

" >>> COMMAND
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>
cnoremap w!! w !sudo tee > /dev/null %

" >>> OPERATOR
onoremap @ iW

"""""""""""""""""""
"  Abbreviations  "
"""""""""""""""""""
cnoreabbrev :f find
cnoreabbrev :s CtrlSF

""""""""""""""
"  AutoCmds  "
""""""""""""""
autocmd BufRead,BufNewFile *.conf set syntax=cfg
autocmd BufRead,BufNewFile *.html set colorcolumn=
autocmd BufRead,BufNewFile *.html setlocal spell spelllang=en_us
autocmd BufRead,BufNewFile *.lshrc set syntax=zsh
autocmd BufRead,BufNewFile *.lzshrc set syntax=zsh
autocmd BufRead,BufNewFile *.make set filetype=make
autocmd BufRead,BufNewFile *.md set colorcolumn=
autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us
autocmd BufRead,BufNewFile *.nasm set filetype=nasm
autocmd BufRead,BufNewFile *.python set filetype=python
autocmd BufRead,BufNewFile *.rst setlocal spell
autocmd BufRead,BufNewFile *.tex setlocal spell spelllang=en_us
autocmd BufRead,BufNewFile *.tex,*.anki_vim let b:delimitMate_quotes = "\" ' $"
autocmd BufRead,BufNewFile *.txt set colorcolumn=
autocmd BufRead,BufNewFile *.txt set filetype=txt
autocmd BufRead,BufNewFile *.xmobarrc set syntax=haskell
autocmd BufRead,BufNewFile *mutt-* set filetype=mail
autocmd BufRead,BufNewFile .coveragerc set filetype=cfg
autocmd BufRead,BufNewFile CMakeLists.txt set filetype=cmake
autocmd BufRead,BufNewFile config set filetype=cfg
autocmd BufReadPost /etc/portage/sets/* set filetype=txt
autocmd BufReadPost /usr/include/c++/**/* set filetype=cpp
autocmd BufReadPost fugitive://* set bufhidden=delete
autocmd BufReadPost quickfix nnoremap <CR> <CR>
autocmd BufReadPost fcr-* set filetype=crontab
autocmd! BufWritePost vimrc source %  " Automatic rewriting of .vimrc
autocmd! BufWritePost .Xresources :Silent xrdb merge /home/bryan/.Xresources
autocmd CmdwinEnter * nnoremap <CR> <CR>| " http://stackoverflow.com/questions/16359878/vim-how-to-map-shift-enter
autocmd ColorScheme * highlight RedundantSpaces ctermbg=red
autocmd FileType * setlocal formatoptions-=t
autocmd FileType mail setlocal spell spelllang=en_us
autocmd FileType man setlocal nowrap
autocmd FileType py,vim,sh,zsh,tex setlocal formatoptions-=ro  " Disables auto-comments on newlines and disables autowrap
autocmd FileType scheme let b:delimitMate_quotes = "\""
autocmd FocusGained,BufEnter * :checktime  " Reloads buffer on buffer changes
autocmd InsertEnter * set timeoutlen=500
autocmd InsertLeave * set timeoutlen=1000


" Creates current file's parent directory if it doesn't already exist
augroup BWCCreateDir
	autocmd!
	autocmd BufWritePre * :call s:_MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

"""""""""""""""
"  Functions  "
"""""""""""""""
" ----- PUBLIC FUNCTIONS (used in other files) -----
" Boolean function which checks if @plugin is installed
function! PluginInstalled(plugin)
    return filereadable("/usr/share/vim/vimfiles/plugin/" . a:plugin . ".vim")
endfunction

function! Sum(number)
  let g:S = g:S + a:number
  return a:number
endfunction

function! SwitchToTest(ext)
    call _SwitchToTest(a:ext, 'find')
endfunction

function! VSwitchToTest(ext)
    call _SwitchToTest(a:ext, 'vert sf')
endfunction

" ----- PRIVATE FUNCTIONS (used only in this file) -----
function! _CookieCutter(project)
    let local_file_path = substitute(expand('%:p'), getcwd(), '', 0)
    return '/home/bryan/.cookiecutters/' . a:project . 
                \ '/\{\{\ cookiecutter.project\|lower\ }}/' . local_file_path
endfunction

function! _DeleteEmptyBuffers()
    let [i, n; empty] = [1, bufnr('$')]
    while i <= n
        if bufexists(i) && bufname(i) == ''
            call add(empty, i)
        endif
        let i += 1
    endwhile
    if len(empty) > 0
        exe 'bdelete' join(empty)
    endif
endfunction

function! _GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

" Returns an expression that will replace a forward slash when one is typed
" in INSERT mode. Used to enable automatic file completion (and sometimes
" header completion in C/C++).
function! _InterpretForwardSlash()
    let last_ch = matchstr(getline('.'), '\%' . (col('.') - 1) . 'c.')

    if (&filetype == 'c' || &filetype == 'cpp')
        let ch = matchstr(getline('.'), '\%' . col('.') . 'c.')
        if (ch == '>')
            if (last_ch == "/")
                return ",.h" " ':h' is a mapping that should be defined in ftplugin/c.vim
            endif

            return "/,.h"
        endif
    endif

    if (last_ch == "/" && pumvisible())
        return "\<C-x>\<C-f>\<C-p>"
    endif

    if (((last_ch == "~") || last_ch == ".") || pumvisible() || last_ch =~ "[A-z0-9]")
        return "/\<C-x>\<C-f>\<C-p>"
    endif

    return "/"
endfunction

" Automatically creates directory if it does not already exist
" https://stackoverflow.com/questions/4292733/vim-creating-parent-directories-on-save
function! s:_MkNonExDir(file, buf)
	if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
		let dir=fnamemodify(a:file, ':h')
		if !isdirectory(dir)
			call mkdir(dir, 'p')
		endif
	endif
endfunction

function! _RemoveFile()
    let filename = expand('%')
    execute "normal ,d"
    call system("safe-rm " . filename)
endfunction

function! _TmuxOrSplitSwitch(wincmd, tmuxdir)
  let previous_winnr = winnr()
  silent! execute "wincmd " . a:wincmd
  if previous_winnr == winnr()
    call system("tmux select-pane -" . a:tmuxdir)
    redraw!
  endif
endfunction

function! _SourceIfExists(file)
  if filereadable(expand(a:file))
    exe 'source' a:file
  endif
endfunction

function! _StatuslineGit()
  let l:branchname = _GitBranch()
  return strlen(l:branchname) > 0?'  ('.l:branchname.')  ':''
endfunction

" Used to switch to and from test files
function! _SwitchToTest(ext, fcmd)
    let basename = expand('%:t:r')
    if basename =~ 'test_.*'
        let pyfile = split(basename, "_")[1]
        execute a:fcmd . " " . pyfile . "." . a:ext
    else
        execute a:fcmd . " test_" . basename . "." . a:ext
    endif
endfunction

function! s:_VSetSearch(cmdtype)
	let temp = @s
	norm! gv"sy
	let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
	let @s = temp
endfunction

""""""""""""""""""""""""""""""""
"  Custom Command Definitions  "
""""""""""""""""""""""""""""""""
" Redraws screen after silent command
command! -nargs=1 Silent
\   execute 'silent !' . <q-args>
\ | execute 'redraw!'

" Removes all swap files in the current working directory
command! RmSwap execute "Silent rm " . expand('%:h') . "/.*.swp"

"""""""""""""""""""
"  Miscellaneous  "
"""""""""""""""""""
" ----- Enable Plugins -----
filetype plugin indent on
runtime macros/matchit.vim

" ----- Split and Tab Settings -----
" See: http://www.codeography.com/2013/06/19/navigating-vim-and-tmux-splits "
if exists('$TMUX')
  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call _TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call _TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call _TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call _TmuxOrSplitSwitch('l', 'R')<cr>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif

" ----- Syntax Highlighting -----
syntax on
syntax enable
hi Constant ctermfg=lightmagenta 
hi SpellBad cterm=underline
hi Normal guibg=NONE ctermbg=NONE

" Styling for the Statusline
highlight VertSplit ctermfg=DarkGrey ctermbg=227
highlight StatusLine cterm=NONE ctermfg=black ctermbg=227
highlight StatusLineNC cterm=NONE ctermfg=black ctermbg=DarkGrey

" ----- Global Variable Assignments -----
let g:S = 0  " Used in 'Sum()' function
let g:tex_flavor = "latex"  " Sets LaTeX as default for .tex files

"""""""""""""""""""
"  Extra Modules  "
"""""""""""""""""""
call _SourceIfExists("/home/bryan/.vim/plugins.vim")
