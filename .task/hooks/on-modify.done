#!/usr/bin/env python

import sys
import json
import datetime as dt

from tags import hasTag
from dates import date_fmt, due_in_N_years, getTodayDT, get_new_wait
from defaults import repeats

old_task = json.loads(sys.stdin.readline())
new_task = json.loads(sys.stdin.readline())


def isDone(task):
    return task['status'].lower() == 'completed'


def isConsistent(task):
    return ('tags' in task.keys()) and ('consistent' in task.keys())


if isDone(new_task):
    for tag, N in repeats.items():
        if hasTag(new_task, tag):
            due_date = dt.datetime.strptime(new_task['due'], date_fmt)

            if not isConsistent(new_task):
                due_date = getTodayDT()

            if any(x in tag for x in ['annual', 'year']):
                new_due = due_in_N_years(N, due_date)
            else:
                new_due = due_date + dt.timedelta(days=N)

            new_task['due'] = new_due.strftime(date_fmt)

            if new_task['wait_delta'] >= 0:
                new_task['wait'] = get_new_wait(new_task)

            new_task['status'] = 'pending'
            new_task.pop('end')


if ('start' in old_task) and ('start' not in new_task):

    with open('/home/bryan/.task/.last_task', 'w') as f:
        f.write(new_task['uuid'])

print(json.dumps(new_task))
