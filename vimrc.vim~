" This checks if I am the user
" I am hoping this may stop the error that Jason Parks is experiencing.
if $USERNAME != "bbugyi200" && $USER != "bryan" && $USERNAME != "Bryan" 
    echo "Using Default gVim Config..."
else

    
" ------------------------ BEGIN:: Windows Specific Commands -------------------
if has("win32")

    " Sources the 'plugins' vim file
    exec "source " . $USERPROFILE . "\\Box Sync\\vim\\plugins.vim"

    set clipboard=unnamed

    behave mswin

    set diffexpr=MyDiff()
    function MyDiff()
      let opt = '-a --binary '
      if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
      if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif 
      let arg1 = v:fname_in
      if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
      let arg2 = v:fname_new
      if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
      let arg3 = v:fname_out
      if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
      let eq = ''
      if $VIMRUNTIME =~ ' '
        if &sh =~ '\<cmd'
          let cmd = '""' . $VIMRUNTIME . '\diff"'
          let eq = '"'
        else
          let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
        endif
      else
        let cmd = $VIMRUNTIME . '\diff'
      endif
      silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
    endfunction

" Linux Configuations
else
    source /home/bryan/localBox/vim/plugins.vim
    set clipboard=unnamedplus
endif


" ----------------------- END:: Windows Specific Commands ----------------------

" ----------------------- BEGIN:: Portable Configurations ----------------------

" -------- GVim/Vim Specific Configs ------------
if has("gui_running")
    colo desert
    cd $HOME
else
    set background=dark
endif
" -----------------------------------------------

set number
set colorcolumn=80
set autoindent
set backspace=2
set autochdir
set tabstop=4
set shiftwidth=4
set expandtab

" Sets LaTeX as default for .tex files
let g:tex_flavor = "latex"

filetype plugin indent on
filetype plugin on
syntax on

" Automatic rewriting of .vimrc
 autocmd! bufwritepost .vimrc source %

" Allows me to use the mouse
set mouse=a

" The <Leader> key can be used for extra mappings
let mapleader = ","

"""""""""""""""""""""
"  Search Settings  "

" incsearch = incremental searching when using '/'"
" ignorecase + smartcase = ignore the case unless there is an uppercase "
" :nohls = clears highlights "

" set hlsearch
set incsearch
set ignorecase
set smartcase

" noremap <silent><Leader>/ :nohls<CR>
""""""""""""""""""""" 

" Shortcuts for quiting vim
noremap <Leader>e :quit<CR>

" Shortcuts for saving vim
" NOTE:: Just use ZZ in normal mode to save and quit.
noremap <Leader>s :w<CR>

" Makes enter key work right in Normal mode
nmap <CR> o<Esc>

nmap <C-N> :NERDTree<CR><S-B>
nmap <Leader>z :ZoomWin<CR>
nmap <Leader>p :CtrlPMRU<CR>

""""""""""""""""""""""""""""""
"  Split and Tab Settings  "
nnoremap <C-j> <C-W><C-J>
nnoremap <C-k> <C-W><C-K>
nnoremap <C-l> <C-W><C-L>
nnoremap <C-h> <C-W><C-H>

" Sets minimum size of active split (by percentage)
let &winheight = &lines * 7 / 10
""""""""""""""""""""""""""""""

" Will execute the 'Run' command which varies based on the file type
nmap <F9> :w<CR>:Run<CR>
imap <F9> <Esc><F9>

" Improve up/down movement on wrapped lines
nnoremap j gj
nnoremap k gk

" Sets tmux pane to the current directory
nnoremap <Leader><F12> :call VimuxRunCommand("cd " .expand("%:p:h") ."&& clear")<CR>

" Turns spellcheck on for txt files
" 2nd line disables the colorcolumn
autocmd BufRead,BufNewFile *.txt setlocal spell spelllang=en_us
autocmd BufRead,BufNewFile *.txt set colorcolumn=

" Used to make syntax highlighting more readable when using Linux
" transparent terminal
highlight Constant ctermfg=lightmagenta 

" --------------------- END:: Portable Configurations --------------------------

endif " $USERNAME == bbugyi200 || $USER == bryan
