"""""""""""""""
"  Functions  "
"""""""""""""""
" ----- PUBLIC FUNCTIONS -----
" Boolean function which checks if @plugin is installed
function PluginInstalled(plugin)
    return filereadable("/usr/share/vim/vimfiles/plugin/" . a:plugin . ".vim")
endfunction

function! Sum(number)
  let g:S = g:S + a:number
  return a:number
endfunction

function! SwitchToTest(ext)
    call _SwitchToTest(a:ext, 'find')
endfunction

function! VSwitchToTest(ext)
    call _SwitchToTest(a:ext, 'vert sf')
endfunction

" ----- PRIVATE FUNCTIONS -----
function! _GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

" Automatically creates directory if it does not already exist
" https://stackoverflow.com/questions/4292733/vim-creating-parent-directories-on-save
function s:_MkNonExDir(file, buf)
	if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
		let dir=fnamemodify(a:file, ':h')
		if !isdirectory(dir)
			call mkdir(dir, 'p')
		endif
	endif
endfunction

function! _SetStatusLine()
    let &statusline = ""
    let &statusline = &statusline . "%{_StatuslineGit()}"
    let &statusline = &statusline . "\ %f"
    let &statusline = &statusline . "%m\ "
    let &statusline = &statusline . "%="
    let &statusline = &statusline . "\ %y"
    let &statusline = &statusline . "\ %{&fileencoding?&fileencoding:&encoding}"
    let &statusline = &statusline . "\[%{&fileformat}\]"
    let &statusline = &statusline . "\ %p%%"
    let &statusline = &statusline . "\ %l:%c"
endfunction

function! _SourceIfExists(file)
  if filereadable(expand(a:file))
    exe 'source' a:file
  endif
endfunction

function! _StatuslineGit()
  let l:branchname = _GitBranch()
  return strlen(l:branchname) > 0?'  ('.l:branchname.')  ':''
endfunction

" Used to switch to and from test files
function! _SwitchToTest(ext, fcmd)
    let basename = expand('%:t:r')
    if basename =~ 'test_.*'
        let pyfile = split(basename, "_")[1]
        exec a:fcmd . " " . pyfile . "." . a:ext
    else
        exec a:fcmd . " test_" . basename . "." . a:ext
    endif
endfunction

function! s:_VSetSearch(cmdtype)
	let temp = @s
	norm! gv"sy
	let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
	let @s = temp
endfunction

""""""""""""""
"  Settings  "
""""""""""""""
set autoindent
set autoread
set background=dark
set backspace=2
set breakindent  " Indents wraps
set clipboard=unnamedplus
set colorcolumn=100
set cursorcolumn
set cursorline
set expandtab
set exrc  " Allows Local .vimrc to be loaded
set grepformat=%f:%l:%c:%m
set grepprg=ack\ --nogroup\ --column\ $*  " Change default program for :grep to ack
set hidden  " Allows you to change buffers without first saving the current buffer
set history=200  " Increase command history limit
set ignorecase
set incsearch
set infercase  " Autocompletion will only recommend completions that match the typed case
set iskeyword+=:  " Allows me to highlight using a colon (:)
set laststatus=2
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<,space:␣
set modeline  " Enables Modeline Magic
set mouse=a  " Allows me to use the mouse
set nocompatible
set nohlsearch  " Disables search highlighting
set nolist
set nrformats+=alpha  " Status Line Settings (mode display)
set number
set scrolloff=1  " Always show one line above/below cursor
set secure
set shiftwidth=4
set smartcase
set tabstop=4
set ttymouse=sgr  " An attempt to fix the issue where mouse-clicks cause random output to screen
set tw=99
set viminfo+=n~/.vim/viminfo  " Changes location of viminfo file
set wildignore+=*/__pycache__/*,*/.git/*,*/venv/*  " 'find'/ctrlp should ignore these folders
set wildmenu  " Improves tab completion from normal mode
set wildmode=full

call _SetStatusLine()

""""""""""""""""""
"  Key Bindings  "
""""""""""""""""""
let mapleader = ","  " The <Leader> key can be used for extra mappings

" >>> COMMAND
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>| " Used to recall commands from history
cnoremap w!! w !sudo tee > /dev/null %| " Allow saving of files as sudo when I forgot to start vim using sudo.

" >>> INSERT
imap <C-h> <Esc><C-h>
imap <C-j> <Esc><C-j>
imap <C-k> <Esc><C-k>
imap <C-l> <Esc><C-l>
inoremap <C-o> <C-x><C-o>| " Omnicompletion shortcut

" >>> VISUAL
vnoremap <Leader>x <Esc>`.``gvP``P| nmap <Leader>x ve<Leader>x| " Swap highlighted word with last word in buffer
xnoremap # :<C-u>call <SID>_VSetSearch('?')<CR>?<C-R>=@/<CR><CR>
xnoremap & :&&<CR>
xnoremap * :<C-u>call <SID>_VSetSearch('/')<CR>/<C-R>=@/<CR><CR>| " Allows for visual search

" >>> NORMAL
nnoremap & :&&<CR>| " Preserves flags when repeating the last substitute command.
nnoremap \ ,
nnoremap <C-Del> :call delete(expand('%'))<CR>| " deletes current file and buffer
nnoremap <C-g> :Gstatus<CR>
nnoremap <C-s> :SyntasticToggleMode<CR>
nnoremap <CR> o<Esc>| " Makes enter key work right in Normal mode
nnoremap <Leader>. :cd ..<CR>:call AddPWDtoPath()<CR>:pwd<CR>
nnoremap <Leader>0 :cd %:h<CR>:pwd<CR>| " cd to current working directory
nnoremap <Leader>1 :b1<CR>
nnoremap <Leader>2 :b2<CR>
nnoremap <Leader>3 :b3<CR>
nnoremap <Leader>4 :b4<CR>
nnoremap <Leader>5 :b5<CR>
nnoremap <Leader>6 :b6<CR>
nnoremap <Leader>7 :b7<CR>
nnoremap <Leader>8 :b8<CR>
nnoremap <Leader>9 :b9<CR>
nnoremap <Leader><space> a<space><esc>hi<space><esc>l| " Put space before and after character under cursor
nnoremap <Leader>F :e ~/.vim/ftplugin/<C-R>=&filetype<CR>.vim<CR>| " Edit ftplugin File
nnoremap <Leader>R :w<CR>:Run2<CR>| imap <Leader>R <Esc><Leader>R
nnoremap <Leader>S :e /home/bryan/Dropbox/dotfiles/extras/vim-snippets/<C-R>=&filetype<CR>.snippets<CR>| " Edit Snippet File
nnoremap <Leader>d :b#<bar>sp<bar>b#<bar>bd<CR>| " Delete Buffer
nnoremap <Leader>e :quit<CR>| " Shortcut for quiting vim
nnoremap <Leader>f :CtrlSF 
nnoremap <Leader>g gqap| " mapping to wrap paragraph
nnoremap <Leader>p :CtrlPMRU<CR>
nnoremap <Leader>r :w<CR>:Run<CR>| imap <Leader>r <Esc><Leader>r
nnoremap <Leader>s :w<CR>| " Shortcut for saving vim
nnoremap <Leader>v :vert sb| imap <Leader>v <Esc><Leader>v
nnoremap <silent> <Leader><Leader>i :w !ix \| xclip -sel clipboard<CR>
nnoremap <silent> <Leader>i :w !ix \| xargs printf "\%s/<C-R>=&filetype<CR>" \| xclip -sel clipboard<CR>| " Makes ix.io snippet using highlighted text and sends ix.io link to clipboard
nnoremap <space> i<space><esc>l| " Allows space to work in Normal-Mode
nnoremap gd :Gdiff 
nnoremap gj j
nnoremap gk k
nnoremap gs :Gstatus<CR>
nnoremap j gj
nnoremap k gk

""""""""""""""
"  AutoCmds  "
""""""""""""""
autocmd BufRead,BufNewFile *.conf set syntax=cfg
autocmd BufRead,BufNewFile *.html set colorcolumn=
autocmd BufRead,BufNewFile *.html setlocal spell spelllang=en_us
autocmd BufRead,BufNewFile *.lshrc set syntax=zsh
autocmd BufRead,BufNewFile *.lzshrc set syntax=zsh
autocmd BufRead,BufNewFile *.md set colorcolumn=
autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us
autocmd BufRead,BufNewFile *.nasm set filetype=nasm
autocmd BufRead,BufNewFile *.tex setlocal spell spelllang=en_us
autocmd BufRead,BufNewFile *.tex,*.anki_vim let b:delimitMate_quotes = "\" ' $"
autocmd BufRead,BufNewFile *.txt set colorcolumn=
autocmd BufRead,BufNewFile *.txt set filetype=txt
autocmd BufRead,BufNewFile *.xmobarrc set syntax=haskell
autocmd BufRead,BufNewFile *mutt-* setfiletype mail
autocmd BufRead,BufNewFile .coveragerc set ft=cfg
autocmd BufRead,BufNewFile CMakeLists.txt set ft=cmake
autocmd BufRead,BufNewFile config set ft=cfg
autocmd BufReadPost /usr/include/c++/**/* set ft=cpp
autocmd BufReadPost fugitive://* set bufhidden=delete
autocmd BufReadPost quickfix nnoremap <CR> <CR>
autocmd CmdwinEnter * nnoremap <CR> <CR>| " http://stackoverflow.com/questions/16359878/vim-how-to-map-shift-enter
autocmd ColorScheme * highlight RedundantSpaces ctermbg=red
autocmd FileType * setlocal formatoptions-=t
autocmd FileType mail setlocal spell spelllang=en_us
autocmd FileType man setlocal nowrap
autocmd FileType py,vim,sh,zsh,tex setlocal formatoptions-=ro  " Disables auto-comments on newlines and disables autowrap
autocmd FocusGained,BufEnter * :checktime  " Reloads buffer on buffer changes
autocmd! BufWritePost .vimrc source %  " Automatic rewriting of .vimrc

" Creates current file's parent directory if it doesn't already exist
augroup BWCCreateDir
	autocmd!
	autocmd BufWritePre * :call s:_MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

"""""""""""""""""""
"  Miscellaneous  "
"""""""""""""""""""
" ----- Appends the open file's directory and the CWD to PATH -----
let tempPath=getcwd() . "/**"
exec "set path+=" . tempPath

let tempPath=expand("%:p:h") . "/**"
exec "set path+=" . tempPath

" ----- Custom Commands -----
" Redraws screen after silent command
command! -nargs=1 Silent
\   execute 'silent !' . <q-args>
\ | execute 'redraw!'

" ----- Enable Plugins -----
filetype plugin indent on
runtime macros/matchit.vim

" ----- Split and Tab Settings -----
" See: http://www.codeography.com/2013/06/19/navigating-vim-and-tmux-splits "
if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif

" ----- Syntax Highlighting -----
syntax on
syntax enable
hi Constant ctermfg=lightmagenta 
hi SpellBad cterm=underline
hi Normal guibg=NONE ctermbg=NONE

" Styling for the Statusline
highlight VertSplit ctermfg=DarkGrey ctermbg=227
highlight StatusLine cterm=NONE ctermfg=black ctermbg=227
highlight StatusLineNC cterm=NONE ctermfg=black ctermbg=DarkGrey

" ----- Global Variable Assignments -----
let g:S = 0  " Used in 'Sum()' function
let g:tex_flavor = "latex"  " Sets LaTeX as default for .tex files
let &winheight = &lines * 6 / 10  " Sets minimum size of active split (by percentage)

""""""""""""""""""""
"  Source Modules  "
""""""""""""""""""""
call _SourceIfExists("/home/bryan/Dropbox/dotfiles/extras/plugins.vim")
