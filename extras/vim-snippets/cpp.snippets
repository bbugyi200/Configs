priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

snippet str "string"
string 
endsnippet

snippet sc "string const" i
string const 
endsnippet

snippet rtt "return gutils::TwoTuple(...)"
return gutils::TwoTuple<$1>($2);
endsnippet

snippet die "die(...)"
die("$1");
endsnippet

snippet usage "Usage Message"
const string usage = "usage: " + PROJECT_NAME + " [-d] [-h]$1";
endsnippet

snippet ";:" "basename" rA
`!p snip.rv = snip.basename`:
endsnippet

snippet "s:" "std::" r
std:
endsnippet

snippet "chr:" "std::chrono" rA
std::chrono:
endsnippet

snippet vec "std::vector" i
std::vector<$0
endsnippet

snippet fore "foreach loop"
for (${1:auto} ${2:i} : ${3:container}) {
	$0
}
endsnippet

snippet inc "C++ #include"
#include <${1:`!p snip.rv = snip.basename`.h}>
endsnippet

snippet Inc "C++ #include" b
#include "${1:`!p snip.rv = snip.basename`}.h"
endsnippet

snippet cout "std::cout << ... << std::endl;"
std::cout << ${1:${VISUAL}} << std::endl;
endsnippet

snippet "cout " "std::cout << ...;" rA
std::cout << $0;
endsnippet

snippet "cin " "std::cin >> ...;" rA
std::cin >> $0;
endsnippet

###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}${2/.+/ : public /m}${2:SuperClass} {
	$0
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{

${VISUAL}$0

}${1/.+/  \/\/ namespace /m}$1
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet


snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
  ${0:FunctionBody}
}
endsnippet
# vim:ft=snippets:

snippet funm "function method definition"
${1:void} ${2:className}::${3:functionName}(${4:})
{
	${5:/* code */}
}
endsnippet

snippet funi "inline function"
${1:void} ${2:functionName}(${4:}) {${5:}}
endsnippet

snippet using "using namespace ..."
using namespace ${1:std};
${2:}
endsnippet

snippet ifndef "ifndef ... define ... endif"
#ifndef ${1:`!p snip.rv = "INCLUDED_" + snip.basename.upper()`}
#define $1

${2:${VISUAL}}

#endif /* $1 */
endsnippet

########## Google Test Snippets
snippet t "TEST"
TEST(${1:group}, ${2:test}) {
	$0
}
endsnippet

snippet tf "TEST_F"
TEST_F(${1:fixture}, ${2:test}) {
	$0
}
endsnippet

snippet fix "TestFixture class"
class ${1:Test}Fixture : public ::testing::Test {
	protected:
		void SetUp() {
			$2
		}

		void TearDown() {
			$3
		}
};
endsnippet

snippet x "EXPECT_???"
EXPECT_${1:EQ}($2, $3);
endsnippet

snippet xe "EXPECT_EQ"
EXPECT_EQ($1, $2);
endsnippet

snippet xs "EXPECT_STREQ"
EXPECT_STREQ($1, "$2");
endsnippet
