priority -50

global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet a "Alias Definition"
alias ${1:ANAME}='$2'
endsnippet

snippet f "Single Line Function Definition"
${1:FNAME}() { $2; }
endsnippet

snippet data "data_dir"
data_dir=/tmp/"$(basename "\$0")"
[[ -d "${data_dir}" ]] || mkdir "${data_dir}"
endsnippet

snippet &> "&> /dev/null"
&> /dev/null
endsnippet

snippet sc "Inline ShellCheck Ignore"
# shellcheck disable=SC${1:2034}
endsnippet

snippet arg "assign command-line argument to variable"
${1:arg}="\$1"; shift
endsnippet

snippet source "source /home/bryan/Dropbox/scripts/modules/bash"
source /home/bryan/Dropbox/scripts/modules/bash
endsnippet

snippet $ "Description" i
"${$1}"
endsnippet

snippet mread "Initialize Multiline String with 'read'"
read -r -d '' ${1:var_name} << EOM
${2:${VISUAL}}
EOM
endsnippet

snippet gutils "source gutils"
source /home/bryan/Dropbox/scripts/modules/bash/gutils.sh
endsnippet

snippet fu "Inline Function Definition"
${1:func}() { $2; };  compdef $1=$0
endsnippet

snippet ee "echo and exit"
echo "\$$1" && exit 0
endsnippet

snippet exec "Disable Output for a Section"
exec 5>&1 > /dev/null
exec 2>&1

${1:${VISUAL}}

exec 1>&5
endsnippet

snippet ifd "Check for --debug option"
if [[ "\$1" == "-d" ]] || [[ "\$1" == "--debug" ]]; then
	PS4='$LINENO: '
	set -x
	shift
fi
endsnippet

snippet usage "Print Usage Info"
usage="${usage} $1"
endsnippet

snippet log "Log to STDIN and System Log"
echo "$1" | tee >(logger -t "$(basename "\$0")")
endsnippet

snippet sudo "Run Script with root Permissions"
# ensure running as root
if [ "$(id -u)" != "0" ]; then
  exec sudo "\$0" "$@"
fi
endsnippet

snippet getopt "parse arguments with getopt"
# ---------- Command-line Arguments ----------
eval set -- "$(getopt -o "d,h,v$1" -l "debug,help,verbose$2" -- "$@")"

read -r -d '' help << EOM
${doc}

${usage}
EOM

while [[ -n "\$1" ]]; do
    case \$1 in
	   -d|--debug )
           debug=true
		   ;;
       -h|--help )
           echo "${help}"
           exit 0
           ;;$3
       -v|--verbose )
           verbose=true
           ;;
	   -- )
	       shift
		   break
		   ;;
	esac
	shift
done

if [[ "${debug}" = true && "${verbose}" = true ]]; then
    PS4='$LINENO: '
    set -x
fi
endsnippet

snippet vgetopt "parse arguments (verbosely) with getopt"
# ---------- Command-line Arguments ----------
eval set -- "$(getopt -o "d,h,q$1" -l "debug,help,quiet$2" -- "$@")"

read -r -d '' help << EOM
${usage}
EOM

while [[ -n "\$1" ]]; do
    case \$1 in
       -d|--debug )
           debug=true
           ;;
       -h|--help )
           echo "${help}"
           exit 0
           ;;
       -q|--quiet )
           quiet=true
           ;;$3
       -- )
           shift
           break
           ;;
    esac
    shift
done

fp_log=/var/tmp/"${scriptname}".log
if [[ "${debug}" = true ]] && [[ "${quiet}" = true ]]; then
    exec > "${fp_log}"
elif [[ "${debug}" = true ]]; then
    exec > >(tee "${fp_log}")
elif [[ "${quiet}" = true ]]; then
    exec > /dev/null
fi

if [[ "${debug}" = true ]] || [[ "${quiet}" = true ]]; then
    exec 2>&1
fi

if [[ "${debug}" = true ]]; then
    PS4='$LINENO: '
    set -x
fi
endsnippet

snippet ## "Docstring"
###################################################################################################
#  ${1:DOCSTRING}
###################################################################################################
endsnippet

snippet #- "Comment Heading"
# ---------- ${1:${VISUAL}} ----------
endsnippet


snippet #= "Comment Sub-Heading"
# ===== ${1:${VISUAL}} =====
endsnippet

snippet #!
`!p snip.rv = '#!/bin/' + getShell() + "\n\n" `
endsnippet

snippet !env "#!/usr/bin/env (!env)"
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "\n\n" `
endsnippet

snippet sbash "safe bash options"
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
`!p snip.rv ='\n\n' `
endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${3:--suffix=${4:.SUFFIX}} ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`}.XXXXXX)"
${5:${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'}${6/(.+)/" 0               # EXIT\n/}${7/(.+)/trap "/}${7:rm -f '$${1/.*\s//}'; exit 1}${7/(.+)/" 2       # INT\n/}${8/(.+)/trap "/}${8:rm -f '$${1/.*\s//}'; exit 1}${8/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet case "case .. esac (case)"
case ${1:word} in
	${2:pattern} )
		$0;;
esac
endsnippet

snippet elif "elif .. (elif)"
elif ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
endsnippet

snippet for "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:#statements}
done
endsnippet

snippet fori "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
	${0:#statements}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet

snippet if "if ... then (if)"
if ${2:[[ ${1:condition} ]]}; then
	${VISUAL:#statements}
fi
endsnippet

snippet until "until ... (done)"
until ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet while "while ... (done)"
while ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet debug "set -x"
PS4='$LINENO: '
set -x
endsnippet

# vim:ft=snippets:
