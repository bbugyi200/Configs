###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

#################################### CUSTOM ####################################

snippet va "__VA_ARGS__" i
__VA_ARGS__
endsnippet

snippet em "EMSG"
EMSG($1);
endsnippet

snippet im "IMSG"
IMSG($1);
endsnippet

snippet d "DMSG"
DMSG($1);
endsnippet

snippet dv "DVEVAL"
DVEVAL($1);
endsnippet

snippet dvm "DVMSG"
DVMSG($1);
endsnippet

snippet cc "char const" i
char const
endsnippet

snippet mdoc "File Docstring"
/** @mainpage ${1:`!p snip.rv = snip.basename`}
 *
 * $2
 * */
endsnippet

snippet fdoc "File Docstring"
/** @file `!p snip.rv = snip.fn` */
endsnippet

snippet doc "Docstring"
/** $1 */
endsnippet

snippet docs "Multi-line Docstring"
/**  $1
 *
 * @${2:param} $0
 * */
endsnippet

snippet Docs "Multi-line Docstring with NO Heading"
/**
 * @${1:param} $0
 * */
endsnippet

snippet *< "Member Doxygen Comment" i
  /**< $1 */
endsnippet

snippet /* "Multi-line Comment"
/* $1 */
endsnippet

snippet st "struct"
typedef struct ${1} {
	$2
} $1;
endsnippet

snippet opt "getopt long option"
{"$1", ${2:no_argument}, 0, '$3'},
endsnippet

snippet getopt "getopt"
const char* usage = "usage: $1 [-h] [-d]$2"

while (true)
{
	static struct option long_options[] =
	{
		/* Argument styles: no_argument, required_argument, optional_argument */
		{"debug", no_argument, 0, 'd'},
		{"verbose", no_argument, 0, 'v'},
		{"help", no_argument, 0, 'h'},
		{0,0,0,0}
	};

	int option_index = 0;

	/* Argument parameters:
		no_argument: " "
		required_argument: ":"
		optional_argument: "::" */

	int choice = getopt_long(argc, argv, "dhv$4",
				long_options, &option_index);

	if (choice == -1)
		break;

	switch(choice)
	{
		case 'd':
			debug_flag = true;
			break;
		case 'h':
			puts(usage);
			exit(0);
			break;$5
		case 'v':
			verbose_flag = true;
			break;
		case '?':
			/* getopt_long will have already printed an error */
			break;
		default:
			/* Not sure how to get here... */
			return EXIT_FAILURE;
	}
}

if (debug_flag) {
	DMSG("Debug mode is enabled.");
}
endsnippet

snippet mal "malloc"
malloc(${1:256}${1/.+/ * /}sizeof(${2:char}));
endsnippet

snippet ui "unsigned int" i
unsigned int
endsnippet

snippet if "if statement"
if ($1) {
	${2:${VISUAL}}
}
endsnippet

snippet inc "includes header"
#include <${1:stdio.h}>
endsnippet

snippet ifs "single-line if"
if ($1)
	$2;
$3
endsnippet

snippet ifer "error check #1"
if (${1} ${2:< 0})
	err_${3:sys}("${4}");
endsnippet

snippet iferl "error check for daemons"
if (${1} ${2:< 0})
	log_${3:sys}("${4}");
endsnippet

snippet iferr "error check advanced"
if (${1}(${2:args}) ${3:< 0})
	err_${4:sys}("$1(${5:%s})", $2);
endsnippet

snippet System "system()"
if ((status = system(${1:cmd})) != 0)
	err_quit("system(\"%s\") = %d", $1, status/256);
endsnippet


################################# BUILT-IN  ####################################
snippet def "#define ..."
#define $1
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char **argv)
{
	${VISUAL}$0
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet

snippet fp "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

snippet p "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

# vim:ft=snippets:
