# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pygpgme', [dirname(__file__)])
        except ImportError:
            import _pygpgme
            return _pygpgme
        if fp is not None:
            try:
                _mod = imp.load_module('_pygpgme', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pygpgme = swig_import_helper()
    del swig_import_helper
else:
    import _pygpgme
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


GPGME_VERSION = _pygpgme.GPGME_VERSION

def gpgme_err_make(*args):
  """gpgme_err_make(source, code) -> gpgme_error_t"""
  return _pygpgme.gpgme_err_make(*args)

def gpgme_error(*args):
  """gpgme_error(code) -> gpgme_error_t"""
  return _pygpgme.gpgme_error(*args)

def gpgme_err_code(*args):
  """gpgme_err_code(err) -> gpgme_err_code_t"""
  return _pygpgme.gpgme_err_code(*args)

def gpgme_err_source(*args):
  """gpgme_err_source(err) -> gpgme_err_source_t"""
  return _pygpgme.gpgme_err_source(*args)

def gpgme_strerror(*args):
  """gpgme_strerror(err) -> char const *"""
  return _pygpgme.gpgme_strerror(*args)

def gpgme_strerror_r(*args):
  """gpgme_strerror_r(err, buf) -> int"""
  return _pygpgme.gpgme_strerror_r(*args)

def gpgme_strsource(*args):
  """gpgme_strsource(err) -> char const *"""
  return _pygpgme.gpgme_strsource(*args)

def gpgme_err_code_from_errno(*args):
  """gpgme_err_code_from_errno(err) -> gpgme_err_code_t"""
  return _pygpgme.gpgme_err_code_from_errno(*args)

def gpgme_err_code_to_errno(*args):
  """gpgme_err_code_to_errno(code) -> int"""
  return _pygpgme.gpgme_err_code_to_errno(*args)

def gpgme_err_code_from_syserror():
  """gpgme_err_code_from_syserror() -> gpgme_err_code_t"""
  return _pygpgme.gpgme_err_code_from_syserror()

def gpgme_err_set_errno(*args):
  """gpgme_err_set_errno(err)"""
  return _pygpgme.gpgme_err_set_errno(*args)

def gpgme_err_make_from_errno(*args):
  """gpgme_err_make_from_errno(source, err) -> gpgme_error_t"""
  return _pygpgme.gpgme_err_make_from_errno(*args)

def gpgme_error_from_errno(*args):
  """gpgme_error_from_errno(err) -> gpgme_error_t"""
  return _pygpgme.gpgme_error_from_errno(*args)

def gpgme_error_from_syserror():
  """gpgme_error_from_syserror() -> gpgme_error_t"""
  return _pygpgme.gpgme_error_from_syserror()
GPGME_DATA_ENCODING_NONE = _pygpgme.GPGME_DATA_ENCODING_NONE
GPGME_DATA_ENCODING_BINARY = _pygpgme.GPGME_DATA_ENCODING_BINARY
GPGME_DATA_ENCODING_BASE64 = _pygpgme.GPGME_DATA_ENCODING_BASE64
GPGME_DATA_ENCODING_ARMOR = _pygpgme.GPGME_DATA_ENCODING_ARMOR
GPGME_DATA_ENCODING_URL = _pygpgme.GPGME_DATA_ENCODING_URL
GPGME_DATA_ENCODING_URLESC = _pygpgme.GPGME_DATA_ENCODING_URLESC
GPGME_DATA_ENCODING_URL0 = _pygpgme.GPGME_DATA_ENCODING_URL0
GPGME_PK_RSA = _pygpgme.GPGME_PK_RSA
GPGME_PK_RSA_E = _pygpgme.GPGME_PK_RSA_E
GPGME_PK_RSA_S = _pygpgme.GPGME_PK_RSA_S
GPGME_PK_ELG_E = _pygpgme.GPGME_PK_ELG_E
GPGME_PK_DSA = _pygpgme.GPGME_PK_DSA
GPGME_PK_ELG = _pygpgme.GPGME_PK_ELG
GPGME_PK_ECDSA = _pygpgme.GPGME_PK_ECDSA
GPGME_PK_ECDH = _pygpgme.GPGME_PK_ECDH
GPGME_MD_NONE = _pygpgme.GPGME_MD_NONE
GPGME_MD_MD5 = _pygpgme.GPGME_MD_MD5
GPGME_MD_SHA1 = _pygpgme.GPGME_MD_SHA1
GPGME_MD_RMD160 = _pygpgme.GPGME_MD_RMD160
GPGME_MD_MD2 = _pygpgme.GPGME_MD_MD2
GPGME_MD_TIGER = _pygpgme.GPGME_MD_TIGER
GPGME_MD_HAVAL = _pygpgme.GPGME_MD_HAVAL
GPGME_MD_SHA256 = _pygpgme.GPGME_MD_SHA256
GPGME_MD_SHA384 = _pygpgme.GPGME_MD_SHA384
GPGME_MD_SHA512 = _pygpgme.GPGME_MD_SHA512
GPGME_MD_MD4 = _pygpgme.GPGME_MD_MD4
GPGME_MD_CRC32 = _pygpgme.GPGME_MD_CRC32
GPGME_MD_CRC32_RFC1510 = _pygpgme.GPGME_MD_CRC32_RFC1510
GPGME_MD_CRC24_RFC2440 = _pygpgme.GPGME_MD_CRC24_RFC2440
GPGME_SIG_STAT_NONE = _pygpgme.GPGME_SIG_STAT_NONE
GPGME_SIG_STAT_GOOD = _pygpgme.GPGME_SIG_STAT_GOOD
GPGME_SIG_STAT_BAD = _pygpgme.GPGME_SIG_STAT_BAD
GPGME_SIG_STAT_NOKEY = _pygpgme.GPGME_SIG_STAT_NOKEY
GPGME_SIG_STAT_NOSIG = _pygpgme.GPGME_SIG_STAT_NOSIG
GPGME_SIG_STAT_ERROR = _pygpgme.GPGME_SIG_STAT_ERROR
GPGME_SIG_STAT_DIFF = _pygpgme.GPGME_SIG_STAT_DIFF
GPGME_SIG_STAT_GOOD_EXP = _pygpgme.GPGME_SIG_STAT_GOOD_EXP
GPGME_SIG_STAT_GOOD_EXPKEY = _pygpgme.GPGME_SIG_STAT_GOOD_EXPKEY
GPGME_SIG_MODE_NORMAL = _pygpgme.GPGME_SIG_MODE_NORMAL
GPGME_SIG_MODE_DETACH = _pygpgme.GPGME_SIG_MODE_DETACH
GPGME_SIG_MODE_CLEAR = _pygpgme.GPGME_SIG_MODE_CLEAR
GPGME_ATTR_KEYID = _pygpgme.GPGME_ATTR_KEYID
GPGME_ATTR_FPR = _pygpgme.GPGME_ATTR_FPR
GPGME_ATTR_ALGO = _pygpgme.GPGME_ATTR_ALGO
GPGME_ATTR_LEN = _pygpgme.GPGME_ATTR_LEN
GPGME_ATTR_CREATED = _pygpgme.GPGME_ATTR_CREATED
GPGME_ATTR_EXPIRE = _pygpgme.GPGME_ATTR_EXPIRE
GPGME_ATTR_OTRUST = _pygpgme.GPGME_ATTR_OTRUST
GPGME_ATTR_USERID = _pygpgme.GPGME_ATTR_USERID
GPGME_ATTR_NAME = _pygpgme.GPGME_ATTR_NAME
GPGME_ATTR_EMAIL = _pygpgme.GPGME_ATTR_EMAIL
GPGME_ATTR_COMMENT = _pygpgme.GPGME_ATTR_COMMENT
GPGME_ATTR_VALIDITY = _pygpgme.GPGME_ATTR_VALIDITY
GPGME_ATTR_LEVEL = _pygpgme.GPGME_ATTR_LEVEL
GPGME_ATTR_TYPE = _pygpgme.GPGME_ATTR_TYPE
GPGME_ATTR_IS_SECRET = _pygpgme.GPGME_ATTR_IS_SECRET
GPGME_ATTR_KEY_REVOKED = _pygpgme.GPGME_ATTR_KEY_REVOKED
GPGME_ATTR_KEY_INVALID = _pygpgme.GPGME_ATTR_KEY_INVALID
GPGME_ATTR_UID_REVOKED = _pygpgme.GPGME_ATTR_UID_REVOKED
GPGME_ATTR_UID_INVALID = _pygpgme.GPGME_ATTR_UID_INVALID
GPGME_ATTR_KEY_CAPS = _pygpgme.GPGME_ATTR_KEY_CAPS
GPGME_ATTR_CAN_ENCRYPT = _pygpgme.GPGME_ATTR_CAN_ENCRYPT
GPGME_ATTR_CAN_SIGN = _pygpgme.GPGME_ATTR_CAN_SIGN
GPGME_ATTR_CAN_CERTIFY = _pygpgme.GPGME_ATTR_CAN_CERTIFY
GPGME_ATTR_KEY_EXPIRED = _pygpgme.GPGME_ATTR_KEY_EXPIRED
GPGME_ATTR_KEY_DISABLED = _pygpgme.GPGME_ATTR_KEY_DISABLED
GPGME_ATTR_SERIAL = _pygpgme.GPGME_ATTR_SERIAL
GPGME_ATTR_ISSUER = _pygpgme.GPGME_ATTR_ISSUER
GPGME_ATTR_CHAINID = _pygpgme.GPGME_ATTR_CHAINID
GPGME_ATTR_SIG_STATUS = _pygpgme.GPGME_ATTR_SIG_STATUS
GPGME_ATTR_ERRTOK = _pygpgme.GPGME_ATTR_ERRTOK
GPGME_ATTR_SIG_SUMMARY = _pygpgme.GPGME_ATTR_SIG_SUMMARY
GPGME_ATTR_SIG_CLASS = _pygpgme.GPGME_ATTR_SIG_CLASS
GPGME_VALIDITY_UNKNOWN = _pygpgme.GPGME_VALIDITY_UNKNOWN
GPGME_VALIDITY_UNDEFINED = _pygpgme.GPGME_VALIDITY_UNDEFINED
GPGME_VALIDITY_NEVER = _pygpgme.GPGME_VALIDITY_NEVER
GPGME_VALIDITY_MARGINAL = _pygpgme.GPGME_VALIDITY_MARGINAL
GPGME_VALIDITY_FULL = _pygpgme.GPGME_VALIDITY_FULL
GPGME_VALIDITY_ULTIMATE = _pygpgme.GPGME_VALIDITY_ULTIMATE
GPGME_PROTOCOL_OpenPGP = _pygpgme.GPGME_PROTOCOL_OpenPGP
GPGME_PROTOCOL_CMS = _pygpgme.GPGME_PROTOCOL_CMS
GPGME_PROTOCOL_GPGCONF = _pygpgme.GPGME_PROTOCOL_GPGCONF
GPGME_PROTOCOL_ASSUAN = _pygpgme.GPGME_PROTOCOL_ASSUAN
GPGME_PROTOCOL_G13 = _pygpgme.GPGME_PROTOCOL_G13
GPGME_PROTOCOL_UISERVER = _pygpgme.GPGME_PROTOCOL_UISERVER
GPGME_PROTOCOL_DEFAULT = _pygpgme.GPGME_PROTOCOL_DEFAULT
GPGME_PROTOCOL_UNKNOWN = _pygpgme.GPGME_PROTOCOL_UNKNOWN
GPGME_KEYLIST_MODE_LOCAL = _pygpgme.GPGME_KEYLIST_MODE_LOCAL
GPGME_KEYLIST_MODE_EXTERN = _pygpgme.GPGME_KEYLIST_MODE_EXTERN
GPGME_KEYLIST_MODE_SIGS = _pygpgme.GPGME_KEYLIST_MODE_SIGS
GPGME_KEYLIST_MODE_SIG_NOTATIONS = _pygpgme.GPGME_KEYLIST_MODE_SIG_NOTATIONS
GPGME_KEYLIST_MODE_EPHEMERAL = _pygpgme.GPGME_KEYLIST_MODE_EPHEMERAL
GPGME_KEYLIST_MODE_VALIDATE = _pygpgme.GPGME_KEYLIST_MODE_VALIDATE
GPGME_EXPORT_MODE_EXTERN = _pygpgme.GPGME_EXPORT_MODE_EXTERN
GPGME_EXPORT_MODE_MINIMAL = _pygpgme.GPGME_EXPORT_MODE_MINIMAL
GPGME_AUDITLOG_HTML = _pygpgme.GPGME_AUDITLOG_HTML
GPGME_AUDITLOG_WITH_HELP = _pygpgme.GPGME_AUDITLOG_WITH_HELP
GPGME_SIG_NOTATION_HUMAN_READABLE = _pygpgme.GPGME_SIG_NOTATION_HUMAN_READABLE
GPGME_SIG_NOTATION_CRITICAL = _pygpgme.GPGME_SIG_NOTATION_CRITICAL
class _gpgme_sig_notation(_object):
    """Proxy of C _gpgme_sig_notation struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_sig_notation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_sig_notation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pygpgme._gpgme_sig_notation_name_set
    __swig_getmethods__["name"] = _pygpgme._gpgme_sig_notation_name_get
    if _newclass:name = _swig_property(_pygpgme._gpgme_sig_notation_name_get, _pygpgme._gpgme_sig_notation_name_set)
    __swig_setmethods__["value"] = _pygpgme._gpgme_sig_notation_value_set
    __swig_getmethods__["value"] = _pygpgme._gpgme_sig_notation_value_get
    if _newclass:value = _swig_property(_pygpgme._gpgme_sig_notation_value_get, _pygpgme._gpgme_sig_notation_value_set)
    __swig_setmethods__["name_len"] = _pygpgme._gpgme_sig_notation_name_len_set
    __swig_getmethods__["name_len"] = _pygpgme._gpgme_sig_notation_name_len_get
    if _newclass:name_len = _swig_property(_pygpgme._gpgme_sig_notation_name_len_get, _pygpgme._gpgme_sig_notation_name_len_set)
    __swig_setmethods__["value_len"] = _pygpgme._gpgme_sig_notation_value_len_set
    __swig_getmethods__["value_len"] = _pygpgme._gpgme_sig_notation_value_len_get
    if _newclass:value_len = _swig_property(_pygpgme._gpgme_sig_notation_value_len_get, _pygpgme._gpgme_sig_notation_value_len_set)
    __swig_setmethods__["flags"] = _pygpgme._gpgme_sig_notation_flags_set
    __swig_getmethods__["flags"] = _pygpgme._gpgme_sig_notation_flags_get
    if _newclass:flags = _swig_property(_pygpgme._gpgme_sig_notation_flags_get, _pygpgme._gpgme_sig_notation_flags_set)
    __swig_setmethods__["human_readable"] = _pygpgme._gpgme_sig_notation_human_readable_set
    __swig_getmethods__["human_readable"] = _pygpgme._gpgme_sig_notation_human_readable_get
    if _newclass:human_readable = _swig_property(_pygpgme._gpgme_sig_notation_human_readable_get, _pygpgme._gpgme_sig_notation_human_readable_set)
    __swig_setmethods__["critical"] = _pygpgme._gpgme_sig_notation_critical_set
    __swig_getmethods__["critical"] = _pygpgme._gpgme_sig_notation_critical_get
    if _newclass:critical = _swig_property(_pygpgme._gpgme_sig_notation_critical_get, _pygpgme._gpgme_sig_notation_critical_set)
    __swig_setmethods__["_unused"] = _pygpgme._gpgme_sig_notation__unused_set
    __swig_getmethods__["_unused"] = _pygpgme._gpgme_sig_notation__unused_get
    if _newclass:_unused = _swig_property(_pygpgme._gpgme_sig_notation__unused_get, _pygpgme._gpgme_sig_notation__unused_set)
    def __init__(self):
        """__init__(self) -> _gpgme_sig_notation"""
        this = _pygpgme.new__gpgme_sig_notation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_sig_notation
    __del__ = lambda self : None;
_gpgme_sig_notation_swigregister = _pygpgme._gpgme_sig_notation_swigregister
_gpgme_sig_notation_swigregister(_gpgme_sig_notation)

GPGME_STATUS_EOF = _pygpgme.GPGME_STATUS_EOF
GPGME_STATUS_ENTER = _pygpgme.GPGME_STATUS_ENTER
GPGME_STATUS_LEAVE = _pygpgme.GPGME_STATUS_LEAVE
GPGME_STATUS_ABORT = _pygpgme.GPGME_STATUS_ABORT
GPGME_STATUS_GOODSIG = _pygpgme.GPGME_STATUS_GOODSIG
GPGME_STATUS_BADSIG = _pygpgme.GPGME_STATUS_BADSIG
GPGME_STATUS_ERRSIG = _pygpgme.GPGME_STATUS_ERRSIG
GPGME_STATUS_BADARMOR = _pygpgme.GPGME_STATUS_BADARMOR
GPGME_STATUS_RSA_OR_IDEA = _pygpgme.GPGME_STATUS_RSA_OR_IDEA
GPGME_STATUS_KEYEXPIRED = _pygpgme.GPGME_STATUS_KEYEXPIRED
GPGME_STATUS_KEYREVOKED = _pygpgme.GPGME_STATUS_KEYREVOKED
GPGME_STATUS_TRUST_UNDEFINED = _pygpgme.GPGME_STATUS_TRUST_UNDEFINED
GPGME_STATUS_TRUST_NEVER = _pygpgme.GPGME_STATUS_TRUST_NEVER
GPGME_STATUS_TRUST_MARGINAL = _pygpgme.GPGME_STATUS_TRUST_MARGINAL
GPGME_STATUS_TRUST_FULLY = _pygpgme.GPGME_STATUS_TRUST_FULLY
GPGME_STATUS_TRUST_ULTIMATE = _pygpgme.GPGME_STATUS_TRUST_ULTIMATE
GPGME_STATUS_SHM_INFO = _pygpgme.GPGME_STATUS_SHM_INFO
GPGME_STATUS_SHM_GET = _pygpgme.GPGME_STATUS_SHM_GET
GPGME_STATUS_SHM_GET_BOOL = _pygpgme.GPGME_STATUS_SHM_GET_BOOL
GPGME_STATUS_SHM_GET_HIDDEN = _pygpgme.GPGME_STATUS_SHM_GET_HIDDEN
GPGME_STATUS_NEED_PASSPHRASE = _pygpgme.GPGME_STATUS_NEED_PASSPHRASE
GPGME_STATUS_VALIDSIG = _pygpgme.GPGME_STATUS_VALIDSIG
GPGME_STATUS_SIG_ID = _pygpgme.GPGME_STATUS_SIG_ID
GPGME_STATUS_ENC_TO = _pygpgme.GPGME_STATUS_ENC_TO
GPGME_STATUS_NODATA = _pygpgme.GPGME_STATUS_NODATA
GPGME_STATUS_BAD_PASSPHRASE = _pygpgme.GPGME_STATUS_BAD_PASSPHRASE
GPGME_STATUS_NO_PUBKEY = _pygpgme.GPGME_STATUS_NO_PUBKEY
GPGME_STATUS_NO_SECKEY = _pygpgme.GPGME_STATUS_NO_SECKEY
GPGME_STATUS_NEED_PASSPHRASE_SYM = _pygpgme.GPGME_STATUS_NEED_PASSPHRASE_SYM
GPGME_STATUS_DECRYPTION_FAILED = _pygpgme.GPGME_STATUS_DECRYPTION_FAILED
GPGME_STATUS_DECRYPTION_OKAY = _pygpgme.GPGME_STATUS_DECRYPTION_OKAY
GPGME_STATUS_MISSING_PASSPHRASE = _pygpgme.GPGME_STATUS_MISSING_PASSPHRASE
GPGME_STATUS_GOOD_PASSPHRASE = _pygpgme.GPGME_STATUS_GOOD_PASSPHRASE
GPGME_STATUS_GOODMDC = _pygpgme.GPGME_STATUS_GOODMDC
GPGME_STATUS_BADMDC = _pygpgme.GPGME_STATUS_BADMDC
GPGME_STATUS_ERRMDC = _pygpgme.GPGME_STATUS_ERRMDC
GPGME_STATUS_IMPORTED = _pygpgme.GPGME_STATUS_IMPORTED
GPGME_STATUS_IMPORT_OK = _pygpgme.GPGME_STATUS_IMPORT_OK
GPGME_STATUS_IMPORT_PROBLEM = _pygpgme.GPGME_STATUS_IMPORT_PROBLEM
GPGME_STATUS_IMPORT_RES = _pygpgme.GPGME_STATUS_IMPORT_RES
GPGME_STATUS_FILE_START = _pygpgme.GPGME_STATUS_FILE_START
GPGME_STATUS_FILE_DONE = _pygpgme.GPGME_STATUS_FILE_DONE
GPGME_STATUS_FILE_ERROR = _pygpgme.GPGME_STATUS_FILE_ERROR
GPGME_STATUS_BEGIN_DECRYPTION = _pygpgme.GPGME_STATUS_BEGIN_DECRYPTION
GPGME_STATUS_END_DECRYPTION = _pygpgme.GPGME_STATUS_END_DECRYPTION
GPGME_STATUS_BEGIN_ENCRYPTION = _pygpgme.GPGME_STATUS_BEGIN_ENCRYPTION
GPGME_STATUS_END_ENCRYPTION = _pygpgme.GPGME_STATUS_END_ENCRYPTION
GPGME_STATUS_DELETE_PROBLEM = _pygpgme.GPGME_STATUS_DELETE_PROBLEM
GPGME_STATUS_GET_BOOL = _pygpgme.GPGME_STATUS_GET_BOOL
GPGME_STATUS_GET_LINE = _pygpgme.GPGME_STATUS_GET_LINE
GPGME_STATUS_GET_HIDDEN = _pygpgme.GPGME_STATUS_GET_HIDDEN
GPGME_STATUS_GOT_IT = _pygpgme.GPGME_STATUS_GOT_IT
GPGME_STATUS_PROGRESS = _pygpgme.GPGME_STATUS_PROGRESS
GPGME_STATUS_SIG_CREATED = _pygpgme.GPGME_STATUS_SIG_CREATED
GPGME_STATUS_SESSION_KEY = _pygpgme.GPGME_STATUS_SESSION_KEY
GPGME_STATUS_NOTATION_NAME = _pygpgme.GPGME_STATUS_NOTATION_NAME
GPGME_STATUS_NOTATION_DATA = _pygpgme.GPGME_STATUS_NOTATION_DATA
GPGME_STATUS_POLICY_URL = _pygpgme.GPGME_STATUS_POLICY_URL
GPGME_STATUS_BEGIN_STREAM = _pygpgme.GPGME_STATUS_BEGIN_STREAM
GPGME_STATUS_END_STREAM = _pygpgme.GPGME_STATUS_END_STREAM
GPGME_STATUS_KEY_CREATED = _pygpgme.GPGME_STATUS_KEY_CREATED
GPGME_STATUS_USERID_HINT = _pygpgme.GPGME_STATUS_USERID_HINT
GPGME_STATUS_UNEXPECTED = _pygpgme.GPGME_STATUS_UNEXPECTED
GPGME_STATUS_INV_RECP = _pygpgme.GPGME_STATUS_INV_RECP
GPGME_STATUS_NO_RECP = _pygpgme.GPGME_STATUS_NO_RECP
GPGME_STATUS_ALREADY_SIGNED = _pygpgme.GPGME_STATUS_ALREADY_SIGNED
GPGME_STATUS_SIGEXPIRED = _pygpgme.GPGME_STATUS_SIGEXPIRED
GPGME_STATUS_EXPSIG = _pygpgme.GPGME_STATUS_EXPSIG
GPGME_STATUS_EXPKEYSIG = _pygpgme.GPGME_STATUS_EXPKEYSIG
GPGME_STATUS_TRUNCATED = _pygpgme.GPGME_STATUS_TRUNCATED
GPGME_STATUS_ERROR = _pygpgme.GPGME_STATUS_ERROR
GPGME_STATUS_NEWSIG = _pygpgme.GPGME_STATUS_NEWSIG
GPGME_STATUS_REVKEYSIG = _pygpgme.GPGME_STATUS_REVKEYSIG
GPGME_STATUS_SIG_SUBPACKET = _pygpgme.GPGME_STATUS_SIG_SUBPACKET
GPGME_STATUS_NEED_PASSPHRASE_PIN = _pygpgme.GPGME_STATUS_NEED_PASSPHRASE_PIN
GPGME_STATUS_SC_OP_FAILURE = _pygpgme.GPGME_STATUS_SC_OP_FAILURE
GPGME_STATUS_SC_OP_SUCCESS = _pygpgme.GPGME_STATUS_SC_OP_SUCCESS
GPGME_STATUS_CARDCTRL = _pygpgme.GPGME_STATUS_CARDCTRL
GPGME_STATUS_BACKUP_KEY_CREATED = _pygpgme.GPGME_STATUS_BACKUP_KEY_CREATED
GPGME_STATUS_PKA_TRUST_BAD = _pygpgme.GPGME_STATUS_PKA_TRUST_BAD
GPGME_STATUS_PKA_TRUST_GOOD = _pygpgme.GPGME_STATUS_PKA_TRUST_GOOD
GPGME_STATUS_PLAINTEXT = _pygpgme.GPGME_STATUS_PLAINTEXT
GPGME_STATUS_INV_SGNR = _pygpgme.GPGME_STATUS_INV_SGNR
GPGME_STATUS_NO_SGNR = _pygpgme.GPGME_STATUS_NO_SGNR
GPGME_STATUS_SUCCESS = _pygpgme.GPGME_STATUS_SUCCESS
GPGME_STATUS_DECRYPTION_INFO = _pygpgme.GPGME_STATUS_DECRYPTION_INFO
class _gpgme_engine_info(_object):
    """Proxy of C _gpgme_engine_info struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_engine_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_engine_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["protocol"] = _pygpgme._gpgme_engine_info_protocol_set
    __swig_getmethods__["protocol"] = _pygpgme._gpgme_engine_info_protocol_get
    if _newclass:protocol = _swig_property(_pygpgme._gpgme_engine_info_protocol_get, _pygpgme._gpgme_engine_info_protocol_set)
    __swig_setmethods__["file_name"] = _pygpgme._gpgme_engine_info_file_name_set
    __swig_getmethods__["file_name"] = _pygpgme._gpgme_engine_info_file_name_get
    if _newclass:file_name = _swig_property(_pygpgme._gpgme_engine_info_file_name_get, _pygpgme._gpgme_engine_info_file_name_set)
    __swig_setmethods__["version"] = _pygpgme._gpgme_engine_info_version_set
    __swig_getmethods__["version"] = _pygpgme._gpgme_engine_info_version_get
    if _newclass:version = _swig_property(_pygpgme._gpgme_engine_info_version_get, _pygpgme._gpgme_engine_info_version_set)
    __swig_setmethods__["req_version"] = _pygpgme._gpgme_engine_info_req_version_set
    __swig_getmethods__["req_version"] = _pygpgme._gpgme_engine_info_req_version_get
    if _newclass:req_version = _swig_property(_pygpgme._gpgme_engine_info_req_version_get, _pygpgme._gpgme_engine_info_req_version_set)
    __swig_setmethods__["home_dir"] = _pygpgme._gpgme_engine_info_home_dir_set
    __swig_getmethods__["home_dir"] = _pygpgme._gpgme_engine_info_home_dir_get
    if _newclass:home_dir = _swig_property(_pygpgme._gpgme_engine_info_home_dir_get, _pygpgme._gpgme_engine_info_home_dir_set)
    def __init__(self):
        """__init__(self) -> _gpgme_engine_info"""
        this = _pygpgme.new__gpgme_engine_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_engine_info
    __del__ = lambda self : None;
_gpgme_engine_info_swigregister = _pygpgme._gpgme_engine_info_swigregister
_gpgme_engine_info_swigregister(_gpgme_engine_info)

class _gpgme_subkey(_object):
    """Proxy of C _gpgme_subkey struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_subkey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_subkey, name)
    __repr__ = _swig_repr
    __swig_setmethods__["revoked"] = _pygpgme._gpgme_subkey_revoked_set
    __swig_getmethods__["revoked"] = _pygpgme._gpgme_subkey_revoked_get
    if _newclass:revoked = _swig_property(_pygpgme._gpgme_subkey_revoked_get, _pygpgme._gpgme_subkey_revoked_set)
    __swig_setmethods__["expired"] = _pygpgme._gpgme_subkey_expired_set
    __swig_getmethods__["expired"] = _pygpgme._gpgme_subkey_expired_get
    if _newclass:expired = _swig_property(_pygpgme._gpgme_subkey_expired_get, _pygpgme._gpgme_subkey_expired_set)
    __swig_setmethods__["disabled"] = _pygpgme._gpgme_subkey_disabled_set
    __swig_getmethods__["disabled"] = _pygpgme._gpgme_subkey_disabled_get
    if _newclass:disabled = _swig_property(_pygpgme._gpgme_subkey_disabled_get, _pygpgme._gpgme_subkey_disabled_set)
    __swig_setmethods__["invalid"] = _pygpgme._gpgme_subkey_invalid_set
    __swig_getmethods__["invalid"] = _pygpgme._gpgme_subkey_invalid_get
    if _newclass:invalid = _swig_property(_pygpgme._gpgme_subkey_invalid_get, _pygpgme._gpgme_subkey_invalid_set)
    __swig_setmethods__["can_encrypt"] = _pygpgme._gpgme_subkey_can_encrypt_set
    __swig_getmethods__["can_encrypt"] = _pygpgme._gpgme_subkey_can_encrypt_get
    if _newclass:can_encrypt = _swig_property(_pygpgme._gpgme_subkey_can_encrypt_get, _pygpgme._gpgme_subkey_can_encrypt_set)
    __swig_setmethods__["can_sign"] = _pygpgme._gpgme_subkey_can_sign_set
    __swig_getmethods__["can_sign"] = _pygpgme._gpgme_subkey_can_sign_get
    if _newclass:can_sign = _swig_property(_pygpgme._gpgme_subkey_can_sign_get, _pygpgme._gpgme_subkey_can_sign_set)
    __swig_setmethods__["can_certify"] = _pygpgme._gpgme_subkey_can_certify_set
    __swig_getmethods__["can_certify"] = _pygpgme._gpgme_subkey_can_certify_get
    if _newclass:can_certify = _swig_property(_pygpgme._gpgme_subkey_can_certify_get, _pygpgme._gpgme_subkey_can_certify_set)
    __swig_setmethods__["secret"] = _pygpgme._gpgme_subkey_secret_set
    __swig_getmethods__["secret"] = _pygpgme._gpgme_subkey_secret_get
    if _newclass:secret = _swig_property(_pygpgme._gpgme_subkey_secret_get, _pygpgme._gpgme_subkey_secret_set)
    __swig_setmethods__["can_authenticate"] = _pygpgme._gpgme_subkey_can_authenticate_set
    __swig_getmethods__["can_authenticate"] = _pygpgme._gpgme_subkey_can_authenticate_get
    if _newclass:can_authenticate = _swig_property(_pygpgme._gpgme_subkey_can_authenticate_get, _pygpgme._gpgme_subkey_can_authenticate_set)
    __swig_setmethods__["is_qualified"] = _pygpgme._gpgme_subkey_is_qualified_set
    __swig_getmethods__["is_qualified"] = _pygpgme._gpgme_subkey_is_qualified_get
    if _newclass:is_qualified = _swig_property(_pygpgme._gpgme_subkey_is_qualified_get, _pygpgme._gpgme_subkey_is_qualified_set)
    __swig_setmethods__["is_cardkey"] = _pygpgme._gpgme_subkey_is_cardkey_set
    __swig_getmethods__["is_cardkey"] = _pygpgme._gpgme_subkey_is_cardkey_get
    if _newclass:is_cardkey = _swig_property(_pygpgme._gpgme_subkey_is_cardkey_get, _pygpgme._gpgme_subkey_is_cardkey_set)
    __swig_setmethods__["_unused"] = _pygpgme._gpgme_subkey__unused_set
    __swig_getmethods__["_unused"] = _pygpgme._gpgme_subkey__unused_get
    if _newclass:_unused = _swig_property(_pygpgme._gpgme_subkey__unused_get, _pygpgme._gpgme_subkey__unused_set)
    __swig_setmethods__["pubkey_algo"] = _pygpgme._gpgme_subkey_pubkey_algo_set
    __swig_getmethods__["pubkey_algo"] = _pygpgme._gpgme_subkey_pubkey_algo_get
    if _newclass:pubkey_algo = _swig_property(_pygpgme._gpgme_subkey_pubkey_algo_get, _pygpgme._gpgme_subkey_pubkey_algo_set)
    __swig_setmethods__["length"] = _pygpgme._gpgme_subkey_length_set
    __swig_getmethods__["length"] = _pygpgme._gpgme_subkey_length_get
    if _newclass:length = _swig_property(_pygpgme._gpgme_subkey_length_get, _pygpgme._gpgme_subkey_length_set)
    __swig_setmethods__["keyid"] = _pygpgme._gpgme_subkey_keyid_set
    __swig_getmethods__["keyid"] = _pygpgme._gpgme_subkey_keyid_get
    if _newclass:keyid = _swig_property(_pygpgme._gpgme_subkey_keyid_get, _pygpgme._gpgme_subkey_keyid_set)
    __swig_setmethods__["_keyid"] = _pygpgme._gpgme_subkey__keyid_set
    __swig_getmethods__["_keyid"] = _pygpgme._gpgme_subkey__keyid_get
    if _newclass:_keyid = _swig_property(_pygpgme._gpgme_subkey__keyid_get, _pygpgme._gpgme_subkey__keyid_set)
    __swig_setmethods__["fpr"] = _pygpgme._gpgme_subkey_fpr_set
    __swig_getmethods__["fpr"] = _pygpgme._gpgme_subkey_fpr_get
    if _newclass:fpr = _swig_property(_pygpgme._gpgme_subkey_fpr_get, _pygpgme._gpgme_subkey_fpr_set)
    __swig_setmethods__["timestamp"] = _pygpgme._gpgme_subkey_timestamp_set
    __swig_getmethods__["timestamp"] = _pygpgme._gpgme_subkey_timestamp_get
    if _newclass:timestamp = _swig_property(_pygpgme._gpgme_subkey_timestamp_get, _pygpgme._gpgme_subkey_timestamp_set)
    __swig_setmethods__["expires"] = _pygpgme._gpgme_subkey_expires_set
    __swig_getmethods__["expires"] = _pygpgme._gpgme_subkey_expires_get
    if _newclass:expires = _swig_property(_pygpgme._gpgme_subkey_expires_get, _pygpgme._gpgme_subkey_expires_set)
    __swig_setmethods__["card_number"] = _pygpgme._gpgme_subkey_card_number_set
    __swig_getmethods__["card_number"] = _pygpgme._gpgme_subkey_card_number_get
    if _newclass:card_number = _swig_property(_pygpgme._gpgme_subkey_card_number_get, _pygpgme._gpgme_subkey_card_number_set)
    def __init__(self):
        """__init__(self) -> _gpgme_subkey"""
        this = _pygpgme.new__gpgme_subkey()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_subkey
    __del__ = lambda self : None;
_gpgme_subkey_swigregister = _pygpgme._gpgme_subkey_swigregister
_gpgme_subkey_swigregister(_gpgme_subkey)

class _gpgme_key_sig(_object):
    """Proxy of C _gpgme_key_sig struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_key_sig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_key_sig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["revoked"] = _pygpgme._gpgme_key_sig_revoked_set
    __swig_getmethods__["revoked"] = _pygpgme._gpgme_key_sig_revoked_get
    if _newclass:revoked = _swig_property(_pygpgme._gpgme_key_sig_revoked_get, _pygpgme._gpgme_key_sig_revoked_set)
    __swig_setmethods__["expired"] = _pygpgme._gpgme_key_sig_expired_set
    __swig_getmethods__["expired"] = _pygpgme._gpgme_key_sig_expired_get
    if _newclass:expired = _swig_property(_pygpgme._gpgme_key_sig_expired_get, _pygpgme._gpgme_key_sig_expired_set)
    __swig_setmethods__["invalid"] = _pygpgme._gpgme_key_sig_invalid_set
    __swig_getmethods__["invalid"] = _pygpgme._gpgme_key_sig_invalid_get
    if _newclass:invalid = _swig_property(_pygpgme._gpgme_key_sig_invalid_get, _pygpgme._gpgme_key_sig_invalid_set)
    __swig_setmethods__["exportable"] = _pygpgme._gpgme_key_sig_exportable_set
    __swig_getmethods__["exportable"] = _pygpgme._gpgme_key_sig_exportable_get
    if _newclass:exportable = _swig_property(_pygpgme._gpgme_key_sig_exportable_get, _pygpgme._gpgme_key_sig_exportable_set)
    __swig_setmethods__["_unused"] = _pygpgme._gpgme_key_sig__unused_set
    __swig_getmethods__["_unused"] = _pygpgme._gpgme_key_sig__unused_get
    if _newclass:_unused = _swig_property(_pygpgme._gpgme_key_sig__unused_get, _pygpgme._gpgme_key_sig__unused_set)
    __swig_setmethods__["pubkey_algo"] = _pygpgme._gpgme_key_sig_pubkey_algo_set
    __swig_getmethods__["pubkey_algo"] = _pygpgme._gpgme_key_sig_pubkey_algo_get
    if _newclass:pubkey_algo = _swig_property(_pygpgme._gpgme_key_sig_pubkey_algo_get, _pygpgme._gpgme_key_sig_pubkey_algo_set)
    __swig_setmethods__["keyid"] = _pygpgme._gpgme_key_sig_keyid_set
    __swig_getmethods__["keyid"] = _pygpgme._gpgme_key_sig_keyid_get
    if _newclass:keyid = _swig_property(_pygpgme._gpgme_key_sig_keyid_get, _pygpgme._gpgme_key_sig_keyid_set)
    __swig_setmethods__["_keyid"] = _pygpgme._gpgme_key_sig__keyid_set
    __swig_getmethods__["_keyid"] = _pygpgme._gpgme_key_sig__keyid_get
    if _newclass:_keyid = _swig_property(_pygpgme._gpgme_key_sig__keyid_get, _pygpgme._gpgme_key_sig__keyid_set)
    __swig_setmethods__["timestamp"] = _pygpgme._gpgme_key_sig_timestamp_set
    __swig_getmethods__["timestamp"] = _pygpgme._gpgme_key_sig_timestamp_get
    if _newclass:timestamp = _swig_property(_pygpgme._gpgme_key_sig_timestamp_get, _pygpgme._gpgme_key_sig_timestamp_set)
    __swig_setmethods__["expires"] = _pygpgme._gpgme_key_sig_expires_set
    __swig_getmethods__["expires"] = _pygpgme._gpgme_key_sig_expires_get
    if _newclass:expires = _swig_property(_pygpgme._gpgme_key_sig_expires_get, _pygpgme._gpgme_key_sig_expires_set)
    __swig_setmethods__["status"] = _pygpgme._gpgme_key_sig_status_set
    __swig_getmethods__["status"] = _pygpgme._gpgme_key_sig_status_get
    if _newclass:status = _swig_property(_pygpgme._gpgme_key_sig_status_get, _pygpgme._gpgme_key_sig_status_set)
    __swig_setmethods__["_py_obsolete_class"] = _pygpgme._gpgme_key_sig__py_obsolete_class_set
    __swig_getmethods__["_py_obsolete_class"] = _pygpgme._gpgme_key_sig__py_obsolete_class_get
    if _newclass:_py_obsolete_class = _swig_property(_pygpgme._gpgme_key_sig__py_obsolete_class_get, _pygpgme._gpgme_key_sig__py_obsolete_class_set)
    __swig_setmethods__["uid"] = _pygpgme._gpgme_key_sig_uid_set
    __swig_getmethods__["uid"] = _pygpgme._gpgme_key_sig_uid_get
    if _newclass:uid = _swig_property(_pygpgme._gpgme_key_sig_uid_get, _pygpgme._gpgme_key_sig_uid_set)
    __swig_setmethods__["name"] = _pygpgme._gpgme_key_sig_name_set
    __swig_getmethods__["name"] = _pygpgme._gpgme_key_sig_name_get
    if _newclass:name = _swig_property(_pygpgme._gpgme_key_sig_name_get, _pygpgme._gpgme_key_sig_name_set)
    __swig_setmethods__["email"] = _pygpgme._gpgme_key_sig_email_set
    __swig_getmethods__["email"] = _pygpgme._gpgme_key_sig_email_get
    if _newclass:email = _swig_property(_pygpgme._gpgme_key_sig_email_get, _pygpgme._gpgme_key_sig_email_set)
    __swig_setmethods__["comment"] = _pygpgme._gpgme_key_sig_comment_set
    __swig_getmethods__["comment"] = _pygpgme._gpgme_key_sig_comment_get
    if _newclass:comment = _swig_property(_pygpgme._gpgme_key_sig_comment_get, _pygpgme._gpgme_key_sig_comment_set)
    __swig_setmethods__["sig_class"] = _pygpgme._gpgme_key_sig_sig_class_set
    __swig_getmethods__["sig_class"] = _pygpgme._gpgme_key_sig_sig_class_get
    if _newclass:sig_class = _swig_property(_pygpgme._gpgme_key_sig_sig_class_get, _pygpgme._gpgme_key_sig_sig_class_set)
    __swig_setmethods__["notations"] = _pygpgme._gpgme_key_sig_notations_set
    __swig_getmethods__["notations"] = _pygpgme._gpgme_key_sig_notations_get
    if _newclass:notations = _swig_property(_pygpgme._gpgme_key_sig_notations_get, _pygpgme._gpgme_key_sig_notations_set)
    __swig_setmethods__["_last_notation"] = _pygpgme._gpgme_key_sig__last_notation_set
    __swig_getmethods__["_last_notation"] = _pygpgme._gpgme_key_sig__last_notation_get
    if _newclass:_last_notation = _swig_property(_pygpgme._gpgme_key_sig__last_notation_get, _pygpgme._gpgme_key_sig__last_notation_set)
    def __init__(self):
        """__init__(self) -> _gpgme_key_sig"""
        this = _pygpgme.new__gpgme_key_sig()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_key_sig
    __del__ = lambda self : None;
_gpgme_key_sig_swigregister = _pygpgme._gpgme_key_sig_swigregister
_gpgme_key_sig_swigregister(_gpgme_key_sig)

class _gpgme_user_id(_object):
    """Proxy of C _gpgme_user_id struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_user_id, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_user_id, name)
    __repr__ = _swig_repr
    __swig_setmethods__["revoked"] = _pygpgme._gpgme_user_id_revoked_set
    __swig_getmethods__["revoked"] = _pygpgme._gpgme_user_id_revoked_get
    if _newclass:revoked = _swig_property(_pygpgme._gpgme_user_id_revoked_get, _pygpgme._gpgme_user_id_revoked_set)
    __swig_setmethods__["invalid"] = _pygpgme._gpgme_user_id_invalid_set
    __swig_getmethods__["invalid"] = _pygpgme._gpgme_user_id_invalid_get
    if _newclass:invalid = _swig_property(_pygpgme._gpgme_user_id_invalid_get, _pygpgme._gpgme_user_id_invalid_set)
    __swig_setmethods__["_unused"] = _pygpgme._gpgme_user_id__unused_set
    __swig_getmethods__["_unused"] = _pygpgme._gpgme_user_id__unused_get
    if _newclass:_unused = _swig_property(_pygpgme._gpgme_user_id__unused_get, _pygpgme._gpgme_user_id__unused_set)
    __swig_setmethods__["validity"] = _pygpgme._gpgme_user_id_validity_set
    __swig_getmethods__["validity"] = _pygpgme._gpgme_user_id_validity_get
    if _newclass:validity = _swig_property(_pygpgme._gpgme_user_id_validity_get, _pygpgme._gpgme_user_id_validity_set)
    __swig_setmethods__["uid"] = _pygpgme._gpgme_user_id_uid_set
    __swig_getmethods__["uid"] = _pygpgme._gpgme_user_id_uid_get
    if _newclass:uid = _swig_property(_pygpgme._gpgme_user_id_uid_get, _pygpgme._gpgme_user_id_uid_set)
    __swig_setmethods__["name"] = _pygpgme._gpgme_user_id_name_set
    __swig_getmethods__["name"] = _pygpgme._gpgme_user_id_name_get
    if _newclass:name = _swig_property(_pygpgme._gpgme_user_id_name_get, _pygpgme._gpgme_user_id_name_set)
    __swig_setmethods__["email"] = _pygpgme._gpgme_user_id_email_set
    __swig_getmethods__["email"] = _pygpgme._gpgme_user_id_email_get
    if _newclass:email = _swig_property(_pygpgme._gpgme_user_id_email_get, _pygpgme._gpgme_user_id_email_set)
    __swig_setmethods__["comment"] = _pygpgme._gpgme_user_id_comment_set
    __swig_getmethods__["comment"] = _pygpgme._gpgme_user_id_comment_get
    if _newclass:comment = _swig_property(_pygpgme._gpgme_user_id_comment_get, _pygpgme._gpgme_user_id_comment_set)
    __swig_setmethods__["signatures"] = _pygpgme._gpgme_user_id_signatures_set
    __swig_getmethods__["signatures"] = _pygpgme._gpgme_user_id_signatures_get
    if _newclass:signatures = _swig_property(_pygpgme._gpgme_user_id_signatures_get, _pygpgme._gpgme_user_id_signatures_set)
    __swig_setmethods__["_last_keysig"] = _pygpgme._gpgme_user_id__last_keysig_set
    __swig_getmethods__["_last_keysig"] = _pygpgme._gpgme_user_id__last_keysig_get
    if _newclass:_last_keysig = _swig_property(_pygpgme._gpgme_user_id__last_keysig_get, _pygpgme._gpgme_user_id__last_keysig_set)
    def __init__(self):
        """__init__(self) -> _gpgme_user_id"""
        this = _pygpgme.new__gpgme_user_id()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_user_id
    __del__ = lambda self : None;
_gpgme_user_id_swigregister = _pygpgme._gpgme_user_id_swigregister
_gpgme_user_id_swigregister(_gpgme_user_id)

class _gpgme_key(_object):
    """Proxy of C _gpgme_key struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_key, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_refs"] = _pygpgme._gpgme_key__refs_set
    __swig_getmethods__["_refs"] = _pygpgme._gpgme_key__refs_get
    if _newclass:_refs = _swig_property(_pygpgme._gpgme_key__refs_get, _pygpgme._gpgme_key__refs_set)
    __swig_setmethods__["revoked"] = _pygpgme._gpgme_key_revoked_set
    __swig_getmethods__["revoked"] = _pygpgme._gpgme_key_revoked_get
    if _newclass:revoked = _swig_property(_pygpgme._gpgme_key_revoked_get, _pygpgme._gpgme_key_revoked_set)
    __swig_setmethods__["expired"] = _pygpgme._gpgme_key_expired_set
    __swig_getmethods__["expired"] = _pygpgme._gpgme_key_expired_get
    if _newclass:expired = _swig_property(_pygpgme._gpgme_key_expired_get, _pygpgme._gpgme_key_expired_set)
    __swig_setmethods__["disabled"] = _pygpgme._gpgme_key_disabled_set
    __swig_getmethods__["disabled"] = _pygpgme._gpgme_key_disabled_get
    if _newclass:disabled = _swig_property(_pygpgme._gpgme_key_disabled_get, _pygpgme._gpgme_key_disabled_set)
    __swig_setmethods__["invalid"] = _pygpgme._gpgme_key_invalid_set
    __swig_getmethods__["invalid"] = _pygpgme._gpgme_key_invalid_get
    if _newclass:invalid = _swig_property(_pygpgme._gpgme_key_invalid_get, _pygpgme._gpgme_key_invalid_set)
    __swig_setmethods__["can_encrypt"] = _pygpgme._gpgme_key_can_encrypt_set
    __swig_getmethods__["can_encrypt"] = _pygpgme._gpgme_key_can_encrypt_get
    if _newclass:can_encrypt = _swig_property(_pygpgme._gpgme_key_can_encrypt_get, _pygpgme._gpgme_key_can_encrypt_set)
    __swig_setmethods__["can_sign"] = _pygpgme._gpgme_key_can_sign_set
    __swig_getmethods__["can_sign"] = _pygpgme._gpgme_key_can_sign_get
    if _newclass:can_sign = _swig_property(_pygpgme._gpgme_key_can_sign_get, _pygpgme._gpgme_key_can_sign_set)
    __swig_setmethods__["can_certify"] = _pygpgme._gpgme_key_can_certify_set
    __swig_getmethods__["can_certify"] = _pygpgme._gpgme_key_can_certify_get
    if _newclass:can_certify = _swig_property(_pygpgme._gpgme_key_can_certify_get, _pygpgme._gpgme_key_can_certify_set)
    __swig_setmethods__["secret"] = _pygpgme._gpgme_key_secret_set
    __swig_getmethods__["secret"] = _pygpgme._gpgme_key_secret_get
    if _newclass:secret = _swig_property(_pygpgme._gpgme_key_secret_get, _pygpgme._gpgme_key_secret_set)
    __swig_setmethods__["can_authenticate"] = _pygpgme._gpgme_key_can_authenticate_set
    __swig_getmethods__["can_authenticate"] = _pygpgme._gpgme_key_can_authenticate_get
    if _newclass:can_authenticate = _swig_property(_pygpgme._gpgme_key_can_authenticate_get, _pygpgme._gpgme_key_can_authenticate_set)
    __swig_setmethods__["is_qualified"] = _pygpgme._gpgme_key_is_qualified_set
    __swig_getmethods__["is_qualified"] = _pygpgme._gpgme_key_is_qualified_get
    if _newclass:is_qualified = _swig_property(_pygpgme._gpgme_key_is_qualified_get, _pygpgme._gpgme_key_is_qualified_set)
    __swig_setmethods__["_unused"] = _pygpgme._gpgme_key__unused_set
    __swig_getmethods__["_unused"] = _pygpgme._gpgme_key__unused_get
    if _newclass:_unused = _swig_property(_pygpgme._gpgme_key__unused_get, _pygpgme._gpgme_key__unused_set)
    __swig_setmethods__["protocol"] = _pygpgme._gpgme_key_protocol_set
    __swig_getmethods__["protocol"] = _pygpgme._gpgme_key_protocol_get
    if _newclass:protocol = _swig_property(_pygpgme._gpgme_key_protocol_get, _pygpgme._gpgme_key_protocol_set)
    __swig_setmethods__["issuer_serial"] = _pygpgme._gpgme_key_issuer_serial_set
    __swig_getmethods__["issuer_serial"] = _pygpgme._gpgme_key_issuer_serial_get
    if _newclass:issuer_serial = _swig_property(_pygpgme._gpgme_key_issuer_serial_get, _pygpgme._gpgme_key_issuer_serial_set)
    __swig_setmethods__["issuer_name"] = _pygpgme._gpgme_key_issuer_name_set
    __swig_getmethods__["issuer_name"] = _pygpgme._gpgme_key_issuer_name_get
    if _newclass:issuer_name = _swig_property(_pygpgme._gpgme_key_issuer_name_get, _pygpgme._gpgme_key_issuer_name_set)
    __swig_setmethods__["chain_id"] = _pygpgme._gpgme_key_chain_id_set
    __swig_getmethods__["chain_id"] = _pygpgme._gpgme_key_chain_id_get
    if _newclass:chain_id = _swig_property(_pygpgme._gpgme_key_chain_id_get, _pygpgme._gpgme_key_chain_id_set)
    __swig_setmethods__["owner_trust"] = _pygpgme._gpgme_key_owner_trust_set
    __swig_getmethods__["owner_trust"] = _pygpgme._gpgme_key_owner_trust_get
    if _newclass:owner_trust = _swig_property(_pygpgme._gpgme_key_owner_trust_get, _pygpgme._gpgme_key_owner_trust_set)
    __swig_setmethods__["subkeys"] = _pygpgme._gpgme_key_subkeys_set
    __swig_getmethods__["subkeys"] = _pygpgme._gpgme_key_subkeys_get
    if _newclass:subkeys = _swig_property(_pygpgme._gpgme_key_subkeys_get, _pygpgme._gpgme_key_subkeys_set)
    __swig_setmethods__["uids"] = _pygpgme._gpgme_key_uids_set
    __swig_getmethods__["uids"] = _pygpgme._gpgme_key_uids_get
    if _newclass:uids = _swig_property(_pygpgme._gpgme_key_uids_get, _pygpgme._gpgme_key_uids_set)
    __swig_setmethods__["_last_subkey"] = _pygpgme._gpgme_key__last_subkey_set
    __swig_getmethods__["_last_subkey"] = _pygpgme._gpgme_key__last_subkey_get
    if _newclass:_last_subkey = _swig_property(_pygpgme._gpgme_key__last_subkey_get, _pygpgme._gpgme_key__last_subkey_set)
    __swig_setmethods__["_last_uid"] = _pygpgme._gpgme_key__last_uid_set
    __swig_getmethods__["_last_uid"] = _pygpgme._gpgme_key__last_uid_get
    if _newclass:_last_uid = _swig_property(_pygpgme._gpgme_key__last_uid_get, _pygpgme._gpgme_key__last_uid_set)
    __swig_setmethods__["keylist_mode"] = _pygpgme._gpgme_key_keylist_mode_set
    __swig_getmethods__["keylist_mode"] = _pygpgme._gpgme_key_keylist_mode_get
    if _newclass:keylist_mode = _swig_property(_pygpgme._gpgme_key_keylist_mode_get, _pygpgme._gpgme_key_keylist_mode_set)
    def __init__(self):
        """__init__(self) -> _gpgme_key"""
        this = _pygpgme.new__gpgme_key()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_key
    __del__ = lambda self : None;
_gpgme_key_swigregister = _pygpgme._gpgme_key_swigregister
_gpgme_key_swigregister(_gpgme_key)


def gpgme_new(*args):
  """gpgme_new(ctx) -> gpgme_error_t"""
  return _pygpgme.gpgme_new(*args)

def gpgme_release(*args):
  """gpgme_release(ctx)"""
  return _pygpgme.gpgme_release(*args)

def gpgme_set_protocol(*args):
  """gpgme_set_protocol(ctx, proto) -> gpgme_error_t"""
  return _pygpgme.gpgme_set_protocol(*args)

def gpgme_get_protocol(*args):
  """gpgme_get_protocol(ctx) -> gpgme_protocol_t"""
  return _pygpgme.gpgme_get_protocol(*args)

def gpgme_set_sub_protocol(*args):
  """gpgme_set_sub_protocol(ctx, proto) -> gpgme_error_t"""
  return _pygpgme.gpgme_set_sub_protocol(*args)

def gpgme_get_sub_protocol(*args):
  """gpgme_get_sub_protocol(ctx) -> gpgme_protocol_t"""
  return _pygpgme.gpgme_get_sub_protocol(*args)

def gpgme_get_protocol_name(*args):
  """gpgme_get_protocol_name(proto) -> char const *"""
  return _pygpgme.gpgme_get_protocol_name(*args)

def gpgme_set_armor(*args):
  """gpgme_set_armor(ctx, yes)"""
  return _pygpgme.gpgme_set_armor(*args)

def gpgme_get_armor(*args):
  """gpgme_get_armor(ctx) -> int"""
  return _pygpgme.gpgme_get_armor(*args)

def gpgme_set_textmode(*args):
  """gpgme_set_textmode(ctx, yes)"""
  return _pygpgme.gpgme_set_textmode(*args)

def gpgme_get_textmode(*args):
  """gpgme_get_textmode(ctx) -> int"""
  return _pygpgme.gpgme_get_textmode(*args)
GPGME_INCLUDE_CERTS_DEFAULT = _pygpgme.GPGME_INCLUDE_CERTS_DEFAULT

def gpgme_set_include_certs(*args):
  """gpgme_set_include_certs(ctx, nr_of_certs)"""
  return _pygpgme.gpgme_set_include_certs(*args)

def gpgme_get_include_certs(*args):
  """gpgme_get_include_certs(ctx) -> int"""
  return _pygpgme.gpgme_get_include_certs(*args)

def gpgme_set_keylist_mode(*args):
  """gpgme_set_keylist_mode(ctx, mode) -> gpgme_error_t"""
  return _pygpgme.gpgme_set_keylist_mode(*args)

def gpgme_get_keylist_mode(*args):
  """gpgme_get_keylist_mode(ctx) -> gpgme_keylist_mode_t"""
  return _pygpgme.gpgme_get_keylist_mode(*args)

def gpgme_set_passphrase_cb(*args):
  """gpgme_set_passphrase_cb(ctx, cb, hook_value)"""
  return _pygpgme.gpgme_set_passphrase_cb(*args)

def gpgme_get_passphrase_cb(*args):
  """gpgme_get_passphrase_cb(ctx, cb, hook_value)"""
  return _pygpgme.gpgme_get_passphrase_cb(*args)

def gpgme_set_progress_cb(*args):
  """gpgme_set_progress_cb(c, cb, hook_value)"""
  return _pygpgme.gpgme_set_progress_cb(*args)

def gpgme_get_progress_cb(*args):
  """gpgme_get_progress_cb(ctx, cb, hook_value)"""
  return _pygpgme.gpgme_get_progress_cb(*args)

def gpgme_set_locale(*args):
  """gpgme_set_locale(ctx, category, value) -> gpgme_error_t"""
  return _pygpgme.gpgme_set_locale(*args)

def gpgme_ctx_get_engine_info(*args):
  """gpgme_ctx_get_engine_info(ctx) -> _gpgme_engine_info"""
  return _pygpgme.gpgme_ctx_get_engine_info(*args)

def gpgme_ctx_set_engine_info(*args):
  """gpgme_ctx_set_engine_info(ctx, proto, file_name, home_dir) -> gpgme_error_t"""
  return _pygpgme.gpgme_ctx_set_engine_info(*args)

def gpgme_pubkey_algo_name(*args):
  """gpgme_pubkey_algo_name(algo) -> char const *"""
  return _pygpgme.gpgme_pubkey_algo_name(*args)

def gpgme_hash_algo_name(*args):
  """gpgme_hash_algo_name(algo) -> char const *"""
  return _pygpgme.gpgme_hash_algo_name(*args)

def gpgme_signers_clear(*args):
  """gpgme_signers_clear(ctx)"""
  return _pygpgme.gpgme_signers_clear(*args)

def gpgme_signers_add(*args):
  """gpgme_signers_add(ctx, key) -> gpgme_error_t"""
  return _pygpgme.gpgme_signers_add(*args)

def gpgme_signers_enum(*args):
  """gpgme_signers_enum(ctx, seq) -> _gpgme_key"""
  return _pygpgme.gpgme_signers_enum(*args)

def gpgme_sig_notation_clear(*args):
  """gpgme_sig_notation_clear(ctx)"""
  return _pygpgme.gpgme_sig_notation_clear(*args)

def gpgme_sig_notation_add(*args):
  """gpgme_sig_notation_add(ctx, name, value, flags) -> gpgme_error_t"""
  return _pygpgme.gpgme_sig_notation_add(*args)

def gpgme_sig_notation_get(*args):
  """gpgme_sig_notation_get(ctx) -> _gpgme_sig_notation"""
  return _pygpgme.gpgme_sig_notation_get(*args)
GPGME_EVENT_START = _pygpgme.GPGME_EVENT_START
GPGME_EVENT_DONE = _pygpgme.GPGME_EVENT_DONE
GPGME_EVENT_NEXT_KEY = _pygpgme.GPGME_EVENT_NEXT_KEY
GPGME_EVENT_NEXT_TRUSTITEM = _pygpgme.GPGME_EVENT_NEXT_TRUSTITEM
class gpgme_io_event_done_data(_object):
    """Proxy of C gpgme_io_event_done_data struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gpgme_io_event_done_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gpgme_io_event_done_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["err"] = _pygpgme.gpgme_io_event_done_data_err_set
    __swig_getmethods__["err"] = _pygpgme.gpgme_io_event_done_data_err_get
    if _newclass:err = _swig_property(_pygpgme.gpgme_io_event_done_data_err_get, _pygpgme.gpgme_io_event_done_data_err_set)
    __swig_setmethods__["op_err"] = _pygpgme.gpgme_io_event_done_data_op_err_set
    __swig_getmethods__["op_err"] = _pygpgme.gpgme_io_event_done_data_op_err_get
    if _newclass:op_err = _swig_property(_pygpgme.gpgme_io_event_done_data_op_err_get, _pygpgme.gpgme_io_event_done_data_op_err_set)
    def __init__(self):
        """__init__(self) -> gpgme_io_event_done_data"""
        this = _pygpgme.new_gpgme_io_event_done_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete_gpgme_io_event_done_data
    __del__ = lambda self : None;
gpgme_io_event_done_data_swigregister = _pygpgme.gpgme_io_event_done_data_swigregister
gpgme_io_event_done_data_swigregister(gpgme_io_event_done_data)

class gpgme_io_cbs(_object):
    """Proxy of C gpgme_io_cbs struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gpgme_io_cbs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gpgme_io_cbs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["add"] = _pygpgme.gpgme_io_cbs_add_set
    __swig_getmethods__["add"] = _pygpgme.gpgme_io_cbs_add_get
    if _newclass:add = _swig_property(_pygpgme.gpgme_io_cbs_add_get, _pygpgme.gpgme_io_cbs_add_set)
    __swig_setmethods__["add_priv"] = _pygpgme.gpgme_io_cbs_add_priv_set
    __swig_getmethods__["add_priv"] = _pygpgme.gpgme_io_cbs_add_priv_get
    if _newclass:add_priv = _swig_property(_pygpgme.gpgme_io_cbs_add_priv_get, _pygpgme.gpgme_io_cbs_add_priv_set)
    __swig_setmethods__["remove"] = _pygpgme.gpgme_io_cbs_remove_set
    __swig_getmethods__["remove"] = _pygpgme.gpgme_io_cbs_remove_get
    if _newclass:remove = _swig_property(_pygpgme.gpgme_io_cbs_remove_get, _pygpgme.gpgme_io_cbs_remove_set)
    __swig_setmethods__["event"] = _pygpgme.gpgme_io_cbs_event_set
    __swig_getmethods__["event"] = _pygpgme.gpgme_io_cbs_event_get
    if _newclass:event = _swig_property(_pygpgme.gpgme_io_cbs_event_get, _pygpgme.gpgme_io_cbs_event_set)
    __swig_setmethods__["event_priv"] = _pygpgme.gpgme_io_cbs_event_priv_set
    __swig_getmethods__["event_priv"] = _pygpgme.gpgme_io_cbs_event_priv_get
    if _newclass:event_priv = _swig_property(_pygpgme.gpgme_io_cbs_event_priv_get, _pygpgme.gpgme_io_cbs_event_priv_set)
    def __init__(self):
        """__init__(self) -> gpgme_io_cbs"""
        this = _pygpgme.new_gpgme_io_cbs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete_gpgme_io_cbs
    __del__ = lambda self : None;
gpgme_io_cbs_swigregister = _pygpgme.gpgme_io_cbs_swigregister
gpgme_io_cbs_swigregister(gpgme_io_cbs)


def gpgme_set_io_cbs(*args):
  """gpgme_set_io_cbs(ctx, io_cbs)"""
  return _pygpgme.gpgme_set_io_cbs(*args)

def gpgme_get_io_cbs(*args):
  """gpgme_get_io_cbs(ctx, io_cbs)"""
  return _pygpgme.gpgme_get_io_cbs(*args)

def gpgme_io_read(*args):
  """gpgme_io_read(fd, buffer, count) -> ssize_t"""
  return _pygpgme.gpgme_io_read(*args)

def gpgme_io_write(*args):
  """gpgme_io_write(fd, buffer, count) -> ssize_t"""
  return _pygpgme.gpgme_io_write(*args)

def gpgme_wait(*args):
  """gpgme_wait(ctx, status, hang) -> gpgme_ctx_t"""
  return _pygpgme.gpgme_wait(*args)

def gpgme_wait_ext(*args):
  """gpgme_wait_ext(ctx, status, op_err, hang) -> gpgme_ctx_t"""
  return _pygpgme.gpgme_wait_ext(*args)
class gpgme_data_cbs(_object):
    """Proxy of C gpgme_data_cbs struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gpgme_data_cbs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gpgme_data_cbs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["read"] = _pygpgme.gpgme_data_cbs_read_set
    __swig_getmethods__["read"] = _pygpgme.gpgme_data_cbs_read_get
    if _newclass:read = _swig_property(_pygpgme.gpgme_data_cbs_read_get, _pygpgme.gpgme_data_cbs_read_set)
    __swig_setmethods__["write"] = _pygpgme.gpgme_data_cbs_write_set
    __swig_getmethods__["write"] = _pygpgme.gpgme_data_cbs_write_get
    if _newclass:write = _swig_property(_pygpgme.gpgme_data_cbs_write_get, _pygpgme.gpgme_data_cbs_write_set)
    __swig_setmethods__["seek"] = _pygpgme.gpgme_data_cbs_seek_set
    __swig_getmethods__["seek"] = _pygpgme.gpgme_data_cbs_seek_get
    if _newclass:seek = _swig_property(_pygpgme.gpgme_data_cbs_seek_get, _pygpgme.gpgme_data_cbs_seek_set)
    __swig_setmethods__["release"] = _pygpgme.gpgme_data_cbs_release_set
    __swig_getmethods__["release"] = _pygpgme.gpgme_data_cbs_release_get
    if _newclass:release = _swig_property(_pygpgme.gpgme_data_cbs_release_get, _pygpgme.gpgme_data_cbs_release_set)
    def __init__(self):
        """__init__(self) -> gpgme_data_cbs"""
        this = _pygpgme.new_gpgme_data_cbs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete_gpgme_data_cbs
    __del__ = lambda self : None;
gpgme_data_cbs_swigregister = _pygpgme.gpgme_data_cbs_swigregister
gpgme_data_cbs_swigregister(gpgme_data_cbs)


def gpgme_data_read(*args):
  """gpgme_data_read(dh, buffer) -> ssize_t"""
  return _pygpgme.gpgme_data_read(*args)

def gpgme_data_write(*args):
  """gpgme_data_write(dh, buffer, size) -> ssize_t"""
  return _pygpgme.gpgme_data_write(*args)

def gpgme_data_seek(*args):
  """gpgme_data_seek(dh, offset, whence) -> off_t"""
  return _pygpgme.gpgme_data_seek(*args)

def gpgme_data_new(*args):
  """gpgme_data_new(r_dh) -> gpgme_error_t"""
  return _pygpgme.gpgme_data_new(*args)

def gpgme_data_release(*args):
  """gpgme_data_release(dh)"""
  return _pygpgme.gpgme_data_release(*args)

def gpgme_data_new_from_mem(*args):
  """gpgme_data_new_from_mem(r_dh, buffer, size, copy) -> gpgme_error_t"""
  return _pygpgme.gpgme_data_new_from_mem(*args)

def gpgme_data_release_and_get_mem(*args):
  """gpgme_data_release_and_get_mem(dh, r_len) -> char *"""
  return _pygpgme.gpgme_data_release_and_get_mem(*args)

def gpgme_free(*args):
  """gpgme_free(buffer)"""
  return _pygpgme.gpgme_free(*args)

def gpgme_data_new_from_cbs(*args):
  """gpgme_data_new_from_cbs(dh, cbs, handle) -> gpgme_error_t"""
  return _pygpgme.gpgme_data_new_from_cbs(*args)

def gpgme_data_new_from_fd(*args):
  """gpgme_data_new_from_fd(dh, fd) -> gpgme_error_t"""
  return _pygpgme.gpgme_data_new_from_fd(*args)

def gpgme_data_new_from_stream(*args):
  """gpgme_data_new_from_stream(dh, stream) -> gpgme_error_t"""
  return _pygpgme.gpgme_data_new_from_stream(*args)

def gpgme_data_get_encoding(*args):
  """gpgme_data_get_encoding(dh) -> gpgme_data_encoding_t"""
  return _pygpgme.gpgme_data_get_encoding(*args)

def gpgme_data_set_encoding(*args):
  """gpgme_data_set_encoding(dh, enc) -> gpgme_error_t"""
  return _pygpgme.gpgme_data_set_encoding(*args)

def gpgme_data_get_file_name(*args):
  """gpgme_data_get_file_name(dh) -> char *"""
  return _pygpgme.gpgme_data_get_file_name(*args)

def gpgme_data_set_file_name(*args):
  """gpgme_data_set_file_name(dh, file_name) -> gpgme_error_t"""
  return _pygpgme.gpgme_data_set_file_name(*args)

def gpgme_data_new_from_file(*args):
  """gpgme_data_new_from_file(r_dh, fname, copy) -> gpgme_error_t"""
  return _pygpgme.gpgme_data_new_from_file(*args)

def gpgme_data_new_from_filepart(*args):
  """gpgme_data_new_from_filepart(r_dh, fname, fp, offset, length) -> gpgme_error_t"""
  return _pygpgme.gpgme_data_new_from_filepart(*args)

def gpgme_get_key(*args):
  """gpgme_get_key(ctx, fpr, r_key, secret) -> gpgme_error_t"""
  return _pygpgme.gpgme_get_key(*args)

def gpgme_key_ref(*args):
  """gpgme_key_ref(key)"""
  return _pygpgme.gpgme_key_ref(*args)

def gpgme_key_unref(*args):
  """gpgme_key_unref(key)"""
  return _pygpgme.gpgme_key_unref(*args)

def gpgme_key_release(*args):
  """gpgme_key_release(key)"""
  return _pygpgme.gpgme_key_release(*args)

def gpgme_cancel(*args):
  """gpgme_cancel(ctx) -> gpgme_error_t"""
  return _pygpgme.gpgme_cancel(*args)

def gpgme_cancel_async(*args):
  """gpgme_cancel_async(ctx) -> gpgme_error_t"""
  return _pygpgme.gpgme_cancel_async(*args)
class _gpgme_invalid_key(_object):
    """Proxy of C _gpgme_invalid_key struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_invalid_key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_invalid_key, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fpr"] = _pygpgme._gpgme_invalid_key_fpr_set
    __swig_getmethods__["fpr"] = _pygpgme._gpgme_invalid_key_fpr_get
    if _newclass:fpr = _swig_property(_pygpgme._gpgme_invalid_key_fpr_get, _pygpgme._gpgme_invalid_key_fpr_set)
    __swig_setmethods__["reason"] = _pygpgme._gpgme_invalid_key_reason_set
    __swig_getmethods__["reason"] = _pygpgme._gpgme_invalid_key_reason_get
    if _newclass:reason = _swig_property(_pygpgme._gpgme_invalid_key_reason_get, _pygpgme._gpgme_invalid_key_reason_set)
    def __init__(self):
        """__init__(self) -> _gpgme_invalid_key"""
        this = _pygpgme.new__gpgme_invalid_key()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_invalid_key
    __del__ = lambda self : None;
_gpgme_invalid_key_swigregister = _pygpgme._gpgme_invalid_key_swigregister
_gpgme_invalid_key_swigregister(_gpgme_invalid_key)

class _gpgme_op_encrypt_result(_object):
    """Proxy of C _gpgme_op_encrypt_result struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_op_encrypt_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_op_encrypt_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["invalid_recipients"] = _pygpgme._gpgme_op_encrypt_result_invalid_recipients_set
    __swig_getmethods__["invalid_recipients"] = _pygpgme._gpgme_op_encrypt_result_invalid_recipients_get
    if _newclass:invalid_recipients = _swig_property(_pygpgme._gpgme_op_encrypt_result_invalid_recipients_get, _pygpgme._gpgme_op_encrypt_result_invalid_recipients_set)
    def __init__(self):
        """__init__(self) -> _gpgme_op_encrypt_result"""
        this = _pygpgme.new__gpgme_op_encrypt_result()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_op_encrypt_result
    __del__ = lambda self : None;
_gpgme_op_encrypt_result_swigregister = _pygpgme._gpgme_op_encrypt_result_swigregister
_gpgme_op_encrypt_result_swigregister(_gpgme_op_encrypt_result)


def gpgme_op_encrypt_result(*args):
  """gpgme_op_encrypt_result(ctx) -> _gpgme_op_encrypt_result"""
  return _pygpgme.gpgme_op_encrypt_result(*args)
GPGME_ENCRYPT_ALWAYS_TRUST = _pygpgme.GPGME_ENCRYPT_ALWAYS_TRUST
GPGME_ENCRYPT_NO_ENCRYPT_TO = _pygpgme.GPGME_ENCRYPT_NO_ENCRYPT_TO
GPGME_ENCRYPT_PREPARE = _pygpgme.GPGME_ENCRYPT_PREPARE
GPGME_ENCRYPT_EXPECT_SIGN = _pygpgme.GPGME_ENCRYPT_EXPECT_SIGN

def gpgme_op_encrypt_start(*args):
  """gpgme_op_encrypt_start(ctx, recp, flags, plain, cipher) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_encrypt_start(*args)

def gpgme_op_encrypt(*args):
  """gpgme_op_encrypt(ctx, recp, flags, plain, cipher) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_encrypt(*args)

def gpgme_op_encrypt_sign_start(*args):
  """gpgme_op_encrypt_sign_start(ctx, recp, flags, plain, cipher) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_encrypt_sign_start(*args)

def gpgme_op_encrypt_sign(*args):
  """gpgme_op_encrypt_sign(ctx, recp, flags, plain, cipher) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_encrypt_sign(*args)
class _gpgme_recipient(_object):
    """Proxy of C _gpgme_recipient struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_recipient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_recipient, name)
    __repr__ = _swig_repr
    __swig_setmethods__["keyid"] = _pygpgme._gpgme_recipient_keyid_set
    __swig_getmethods__["keyid"] = _pygpgme._gpgme_recipient_keyid_get
    if _newclass:keyid = _swig_property(_pygpgme._gpgme_recipient_keyid_get, _pygpgme._gpgme_recipient_keyid_set)
    __swig_setmethods__["_keyid"] = _pygpgme._gpgme_recipient__keyid_set
    __swig_getmethods__["_keyid"] = _pygpgme._gpgme_recipient__keyid_get
    if _newclass:_keyid = _swig_property(_pygpgme._gpgme_recipient__keyid_get, _pygpgme._gpgme_recipient__keyid_set)
    __swig_setmethods__["pubkey_algo"] = _pygpgme._gpgme_recipient_pubkey_algo_set
    __swig_getmethods__["pubkey_algo"] = _pygpgme._gpgme_recipient_pubkey_algo_get
    if _newclass:pubkey_algo = _swig_property(_pygpgme._gpgme_recipient_pubkey_algo_get, _pygpgme._gpgme_recipient_pubkey_algo_set)
    __swig_setmethods__["status"] = _pygpgme._gpgme_recipient_status_set
    __swig_getmethods__["status"] = _pygpgme._gpgme_recipient_status_get
    if _newclass:status = _swig_property(_pygpgme._gpgme_recipient_status_get, _pygpgme._gpgme_recipient_status_set)
    def __init__(self):
        """__init__(self) -> _gpgme_recipient"""
        this = _pygpgme.new__gpgme_recipient()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_recipient
    __del__ = lambda self : None;
_gpgme_recipient_swigregister = _pygpgme._gpgme_recipient_swigregister
_gpgme_recipient_swigregister(_gpgme_recipient)

class _gpgme_op_decrypt_result(_object):
    """Proxy of C _gpgme_op_decrypt_result struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_op_decrypt_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_op_decrypt_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["unsupported_algorithm"] = _pygpgme._gpgme_op_decrypt_result_unsupported_algorithm_set
    __swig_getmethods__["unsupported_algorithm"] = _pygpgme._gpgme_op_decrypt_result_unsupported_algorithm_get
    if _newclass:unsupported_algorithm = _swig_property(_pygpgme._gpgme_op_decrypt_result_unsupported_algorithm_get, _pygpgme._gpgme_op_decrypt_result_unsupported_algorithm_set)
    __swig_setmethods__["wrong_key_usage"] = _pygpgme._gpgme_op_decrypt_result_wrong_key_usage_set
    __swig_getmethods__["wrong_key_usage"] = _pygpgme._gpgme_op_decrypt_result_wrong_key_usage_get
    if _newclass:wrong_key_usage = _swig_property(_pygpgme._gpgme_op_decrypt_result_wrong_key_usage_get, _pygpgme._gpgme_op_decrypt_result_wrong_key_usage_set)
    __swig_setmethods__["_unused"] = _pygpgme._gpgme_op_decrypt_result__unused_set
    __swig_getmethods__["_unused"] = _pygpgme._gpgme_op_decrypt_result__unused_get
    if _newclass:_unused = _swig_property(_pygpgme._gpgme_op_decrypt_result__unused_get, _pygpgme._gpgme_op_decrypt_result__unused_set)
    __swig_setmethods__["recipients"] = _pygpgme._gpgme_op_decrypt_result_recipients_set
    __swig_getmethods__["recipients"] = _pygpgme._gpgme_op_decrypt_result_recipients_get
    if _newclass:recipients = _swig_property(_pygpgme._gpgme_op_decrypt_result_recipients_get, _pygpgme._gpgme_op_decrypt_result_recipients_set)
    __swig_setmethods__["file_name"] = _pygpgme._gpgme_op_decrypt_result_file_name_set
    __swig_getmethods__["file_name"] = _pygpgme._gpgme_op_decrypt_result_file_name_get
    if _newclass:file_name = _swig_property(_pygpgme._gpgme_op_decrypt_result_file_name_get, _pygpgme._gpgme_op_decrypt_result_file_name_set)
    def __init__(self):
        """__init__(self) -> _gpgme_op_decrypt_result"""
        this = _pygpgme.new__gpgme_op_decrypt_result()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_op_decrypt_result
    __del__ = lambda self : None;
_gpgme_op_decrypt_result_swigregister = _pygpgme._gpgme_op_decrypt_result_swigregister
_gpgme_op_decrypt_result_swigregister(_gpgme_op_decrypt_result)


def gpgme_op_decrypt_result(*args):
  """gpgme_op_decrypt_result(ctx) -> _gpgme_op_decrypt_result"""
  return _pygpgme.gpgme_op_decrypt_result(*args)

def gpgme_op_decrypt_start(*args):
  """gpgme_op_decrypt_start(ctx, cipher, plain) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_decrypt_start(*args)

def gpgme_op_decrypt(*args):
  """gpgme_op_decrypt(ctx, cipher, plain) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_decrypt(*args)

def gpgme_op_decrypt_verify_start(*args):
  """gpgme_op_decrypt_verify_start(ctx, cipher, plain) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_decrypt_verify_start(*args)

def gpgme_op_decrypt_verify(*args):
  """gpgme_op_decrypt_verify(ctx, cipher, plain) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_decrypt_verify(*args)
class _gpgme_new_signature(_object):
    """Proxy of C _gpgme_new_signature struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_new_signature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_new_signature, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pygpgme._gpgme_new_signature_type_set
    __swig_getmethods__["type"] = _pygpgme._gpgme_new_signature_type_get
    if _newclass:type = _swig_property(_pygpgme._gpgme_new_signature_type_get, _pygpgme._gpgme_new_signature_type_set)
    __swig_setmethods__["pubkey_algo"] = _pygpgme._gpgme_new_signature_pubkey_algo_set
    __swig_getmethods__["pubkey_algo"] = _pygpgme._gpgme_new_signature_pubkey_algo_get
    if _newclass:pubkey_algo = _swig_property(_pygpgme._gpgme_new_signature_pubkey_algo_get, _pygpgme._gpgme_new_signature_pubkey_algo_set)
    __swig_setmethods__["hash_algo"] = _pygpgme._gpgme_new_signature_hash_algo_set
    __swig_getmethods__["hash_algo"] = _pygpgme._gpgme_new_signature_hash_algo_get
    if _newclass:hash_algo = _swig_property(_pygpgme._gpgme_new_signature_hash_algo_get, _pygpgme._gpgme_new_signature_hash_algo_set)
    __swig_setmethods__["_obsolete_class"] = _pygpgme._gpgme_new_signature__obsolete_class_set
    __swig_getmethods__["_obsolete_class"] = _pygpgme._gpgme_new_signature__obsolete_class_get
    if _newclass:_obsolete_class = _swig_property(_pygpgme._gpgme_new_signature__obsolete_class_get, _pygpgme._gpgme_new_signature__obsolete_class_set)
    __swig_setmethods__["timestamp"] = _pygpgme._gpgme_new_signature_timestamp_set
    __swig_getmethods__["timestamp"] = _pygpgme._gpgme_new_signature_timestamp_get
    if _newclass:timestamp = _swig_property(_pygpgme._gpgme_new_signature_timestamp_get, _pygpgme._gpgme_new_signature_timestamp_set)
    __swig_setmethods__["fpr"] = _pygpgme._gpgme_new_signature_fpr_set
    __swig_getmethods__["fpr"] = _pygpgme._gpgme_new_signature_fpr_get
    if _newclass:fpr = _swig_property(_pygpgme._gpgme_new_signature_fpr_get, _pygpgme._gpgme_new_signature_fpr_set)
    __swig_setmethods__["_py_obsolete_class"] = _pygpgme._gpgme_new_signature__py_obsolete_class_set
    __swig_getmethods__["_py_obsolete_class"] = _pygpgme._gpgme_new_signature__py_obsolete_class_get
    if _newclass:_py_obsolete_class = _swig_property(_pygpgme._gpgme_new_signature__py_obsolete_class_get, _pygpgme._gpgme_new_signature__py_obsolete_class_set)
    __swig_setmethods__["sig_class"] = _pygpgme._gpgme_new_signature_sig_class_set
    __swig_getmethods__["sig_class"] = _pygpgme._gpgme_new_signature_sig_class_get
    if _newclass:sig_class = _swig_property(_pygpgme._gpgme_new_signature_sig_class_get, _pygpgme._gpgme_new_signature_sig_class_set)
    def __init__(self):
        """__init__(self) -> _gpgme_new_signature"""
        this = _pygpgme.new__gpgme_new_signature()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_new_signature
    __del__ = lambda self : None;
_gpgme_new_signature_swigregister = _pygpgme._gpgme_new_signature_swigregister
_gpgme_new_signature_swigregister(_gpgme_new_signature)

class _gpgme_op_sign_result(_object):
    """Proxy of C _gpgme_op_sign_result struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_op_sign_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_op_sign_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["invalid_signers"] = _pygpgme._gpgme_op_sign_result_invalid_signers_set
    __swig_getmethods__["invalid_signers"] = _pygpgme._gpgme_op_sign_result_invalid_signers_get
    if _newclass:invalid_signers = _swig_property(_pygpgme._gpgme_op_sign_result_invalid_signers_get, _pygpgme._gpgme_op_sign_result_invalid_signers_set)
    __swig_setmethods__["signatures"] = _pygpgme._gpgme_op_sign_result_signatures_set
    __swig_getmethods__["signatures"] = _pygpgme._gpgme_op_sign_result_signatures_get
    if _newclass:signatures = _swig_property(_pygpgme._gpgme_op_sign_result_signatures_get, _pygpgme._gpgme_op_sign_result_signatures_set)
    def __init__(self):
        """__init__(self) -> _gpgme_op_sign_result"""
        this = _pygpgme.new__gpgme_op_sign_result()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_op_sign_result
    __del__ = lambda self : None;
_gpgme_op_sign_result_swigregister = _pygpgme._gpgme_op_sign_result_swigregister
_gpgme_op_sign_result_swigregister(_gpgme_op_sign_result)


def gpgme_op_sign_result(*args):
  """gpgme_op_sign_result(ctx) -> _gpgme_op_sign_result"""
  return _pygpgme.gpgme_op_sign_result(*args)

def gpgme_op_sign_start(*args):
  """gpgme_op_sign_start(ctx, plain, sig, mode) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_sign_start(*args)

def gpgme_op_sign(*args):
  """gpgme_op_sign(ctx, plain, sig, mode) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_sign(*args)
GPGME_SIGSUM_VALID = _pygpgme.GPGME_SIGSUM_VALID
GPGME_SIGSUM_GREEN = _pygpgme.GPGME_SIGSUM_GREEN
GPGME_SIGSUM_RED = _pygpgme.GPGME_SIGSUM_RED
GPGME_SIGSUM_KEY_REVOKED = _pygpgme.GPGME_SIGSUM_KEY_REVOKED
GPGME_SIGSUM_KEY_EXPIRED = _pygpgme.GPGME_SIGSUM_KEY_EXPIRED
GPGME_SIGSUM_SIG_EXPIRED = _pygpgme.GPGME_SIGSUM_SIG_EXPIRED
GPGME_SIGSUM_KEY_MISSING = _pygpgme.GPGME_SIGSUM_KEY_MISSING
GPGME_SIGSUM_CRL_MISSING = _pygpgme.GPGME_SIGSUM_CRL_MISSING
GPGME_SIGSUM_CRL_TOO_OLD = _pygpgme.GPGME_SIGSUM_CRL_TOO_OLD
GPGME_SIGSUM_BAD_POLICY = _pygpgme.GPGME_SIGSUM_BAD_POLICY
GPGME_SIGSUM_SYS_ERROR = _pygpgme.GPGME_SIGSUM_SYS_ERROR
class _gpgme_signature(_object):
    """Proxy of C _gpgme_signature struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_signature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_signature, name)
    __repr__ = _swig_repr
    __swig_setmethods__["summary"] = _pygpgme._gpgme_signature_summary_set
    __swig_getmethods__["summary"] = _pygpgme._gpgme_signature_summary_get
    if _newclass:summary = _swig_property(_pygpgme._gpgme_signature_summary_get, _pygpgme._gpgme_signature_summary_set)
    __swig_setmethods__["fpr"] = _pygpgme._gpgme_signature_fpr_set
    __swig_getmethods__["fpr"] = _pygpgme._gpgme_signature_fpr_get
    if _newclass:fpr = _swig_property(_pygpgme._gpgme_signature_fpr_get, _pygpgme._gpgme_signature_fpr_set)
    __swig_setmethods__["status"] = _pygpgme._gpgme_signature_status_set
    __swig_getmethods__["status"] = _pygpgme._gpgme_signature_status_get
    if _newclass:status = _swig_property(_pygpgme._gpgme_signature_status_get, _pygpgme._gpgme_signature_status_set)
    __swig_setmethods__["notations"] = _pygpgme._gpgme_signature_notations_set
    __swig_getmethods__["notations"] = _pygpgme._gpgme_signature_notations_get
    if _newclass:notations = _swig_property(_pygpgme._gpgme_signature_notations_get, _pygpgme._gpgme_signature_notations_set)
    __swig_setmethods__["timestamp"] = _pygpgme._gpgme_signature_timestamp_set
    __swig_getmethods__["timestamp"] = _pygpgme._gpgme_signature_timestamp_get
    if _newclass:timestamp = _swig_property(_pygpgme._gpgme_signature_timestamp_get, _pygpgme._gpgme_signature_timestamp_set)
    __swig_setmethods__["exp_timestamp"] = _pygpgme._gpgme_signature_exp_timestamp_set
    __swig_getmethods__["exp_timestamp"] = _pygpgme._gpgme_signature_exp_timestamp_get
    if _newclass:exp_timestamp = _swig_property(_pygpgme._gpgme_signature_exp_timestamp_get, _pygpgme._gpgme_signature_exp_timestamp_set)
    __swig_setmethods__["wrong_key_usage"] = _pygpgme._gpgme_signature_wrong_key_usage_set
    __swig_getmethods__["wrong_key_usage"] = _pygpgme._gpgme_signature_wrong_key_usage_get
    if _newclass:wrong_key_usage = _swig_property(_pygpgme._gpgme_signature_wrong_key_usage_get, _pygpgme._gpgme_signature_wrong_key_usage_set)
    __swig_setmethods__["pka_trust"] = _pygpgme._gpgme_signature_pka_trust_set
    __swig_getmethods__["pka_trust"] = _pygpgme._gpgme_signature_pka_trust_get
    if _newclass:pka_trust = _swig_property(_pygpgme._gpgme_signature_pka_trust_get, _pygpgme._gpgme_signature_pka_trust_set)
    __swig_setmethods__["chain_model"] = _pygpgme._gpgme_signature_chain_model_set
    __swig_getmethods__["chain_model"] = _pygpgme._gpgme_signature_chain_model_get
    if _newclass:chain_model = _swig_property(_pygpgme._gpgme_signature_chain_model_get, _pygpgme._gpgme_signature_chain_model_set)
    __swig_setmethods__["_unused"] = _pygpgme._gpgme_signature__unused_set
    __swig_getmethods__["_unused"] = _pygpgme._gpgme_signature__unused_get
    if _newclass:_unused = _swig_property(_pygpgme._gpgme_signature__unused_get, _pygpgme._gpgme_signature__unused_set)
    __swig_setmethods__["validity"] = _pygpgme._gpgme_signature_validity_set
    __swig_getmethods__["validity"] = _pygpgme._gpgme_signature_validity_get
    if _newclass:validity = _swig_property(_pygpgme._gpgme_signature_validity_get, _pygpgme._gpgme_signature_validity_set)
    __swig_setmethods__["validity_reason"] = _pygpgme._gpgme_signature_validity_reason_set
    __swig_getmethods__["validity_reason"] = _pygpgme._gpgme_signature_validity_reason_get
    if _newclass:validity_reason = _swig_property(_pygpgme._gpgme_signature_validity_reason_get, _pygpgme._gpgme_signature_validity_reason_set)
    __swig_setmethods__["pubkey_algo"] = _pygpgme._gpgme_signature_pubkey_algo_set
    __swig_getmethods__["pubkey_algo"] = _pygpgme._gpgme_signature_pubkey_algo_get
    if _newclass:pubkey_algo = _swig_property(_pygpgme._gpgme_signature_pubkey_algo_get, _pygpgme._gpgme_signature_pubkey_algo_set)
    __swig_setmethods__["hash_algo"] = _pygpgme._gpgme_signature_hash_algo_set
    __swig_getmethods__["hash_algo"] = _pygpgme._gpgme_signature_hash_algo_get
    if _newclass:hash_algo = _swig_property(_pygpgme._gpgme_signature_hash_algo_get, _pygpgme._gpgme_signature_hash_algo_set)
    __swig_setmethods__["pka_address"] = _pygpgme._gpgme_signature_pka_address_set
    __swig_getmethods__["pka_address"] = _pygpgme._gpgme_signature_pka_address_get
    if _newclass:pka_address = _swig_property(_pygpgme._gpgme_signature_pka_address_get, _pygpgme._gpgme_signature_pka_address_set)
    def __init__(self):
        """__init__(self) -> _gpgme_signature"""
        this = _pygpgme.new__gpgme_signature()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_signature
    __del__ = lambda self : None;
_gpgme_signature_swigregister = _pygpgme._gpgme_signature_swigregister
_gpgme_signature_swigregister(_gpgme_signature)

class _gpgme_op_verify_result(_object):
    """Proxy of C _gpgme_op_verify_result struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_op_verify_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_op_verify_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["signatures"] = _pygpgme._gpgme_op_verify_result_signatures_set
    __swig_getmethods__["signatures"] = _pygpgme._gpgme_op_verify_result_signatures_get
    if _newclass:signatures = _swig_property(_pygpgme._gpgme_op_verify_result_signatures_get, _pygpgme._gpgme_op_verify_result_signatures_set)
    __swig_setmethods__["file_name"] = _pygpgme._gpgme_op_verify_result_file_name_set
    __swig_getmethods__["file_name"] = _pygpgme._gpgme_op_verify_result_file_name_get
    if _newclass:file_name = _swig_property(_pygpgme._gpgme_op_verify_result_file_name_get, _pygpgme._gpgme_op_verify_result_file_name_set)
    def __init__(self):
        """__init__(self) -> _gpgme_op_verify_result"""
        this = _pygpgme.new__gpgme_op_verify_result()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_op_verify_result
    __del__ = lambda self : None;
_gpgme_op_verify_result_swigregister = _pygpgme._gpgme_op_verify_result_swigregister
_gpgme_op_verify_result_swigregister(_gpgme_op_verify_result)


def gpgme_op_verify_result(*args):
  """gpgme_op_verify_result(ctx) -> _gpgme_op_verify_result"""
  return _pygpgme.gpgme_op_verify_result(*args)

def gpgme_op_verify_start(*args):
  """gpgme_op_verify_start(ctx, sig, signed_text, plaintext) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_verify_start(*args)

def gpgme_op_verify(*args):
  """gpgme_op_verify(ctx, sig, signed_text, plaintext) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_verify(*args)
GPGME_IMPORT_NEW = _pygpgme.GPGME_IMPORT_NEW
GPGME_IMPORT_UID = _pygpgme.GPGME_IMPORT_UID
GPGME_IMPORT_SIG = _pygpgme.GPGME_IMPORT_SIG
GPGME_IMPORT_SUBKEY = _pygpgme.GPGME_IMPORT_SUBKEY
GPGME_IMPORT_SECRET = _pygpgme.GPGME_IMPORT_SECRET
class _gpgme_import_status(_object):
    """Proxy of C _gpgme_import_status struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_import_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_import_status, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fpr"] = _pygpgme._gpgme_import_status_fpr_set
    __swig_getmethods__["fpr"] = _pygpgme._gpgme_import_status_fpr_get
    if _newclass:fpr = _swig_property(_pygpgme._gpgme_import_status_fpr_get, _pygpgme._gpgme_import_status_fpr_set)
    __swig_setmethods__["result"] = _pygpgme._gpgme_import_status_result_set
    __swig_getmethods__["result"] = _pygpgme._gpgme_import_status_result_get
    if _newclass:result = _swig_property(_pygpgme._gpgme_import_status_result_get, _pygpgme._gpgme_import_status_result_set)
    __swig_setmethods__["status"] = _pygpgme._gpgme_import_status_status_set
    __swig_getmethods__["status"] = _pygpgme._gpgme_import_status_status_get
    if _newclass:status = _swig_property(_pygpgme._gpgme_import_status_status_get, _pygpgme._gpgme_import_status_status_set)
    def __init__(self):
        """__init__(self) -> _gpgme_import_status"""
        this = _pygpgme.new__gpgme_import_status()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_import_status
    __del__ = lambda self : None;
_gpgme_import_status_swigregister = _pygpgme._gpgme_import_status_swigregister
_gpgme_import_status_swigregister(_gpgme_import_status)

class _gpgme_op_import_result(_object):
    """Proxy of C _gpgme_op_import_result struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_op_import_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_op_import_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["considered"] = _pygpgme._gpgme_op_import_result_considered_set
    __swig_getmethods__["considered"] = _pygpgme._gpgme_op_import_result_considered_get
    if _newclass:considered = _swig_property(_pygpgme._gpgme_op_import_result_considered_get, _pygpgme._gpgme_op_import_result_considered_set)
    __swig_setmethods__["no_user_id"] = _pygpgme._gpgme_op_import_result_no_user_id_set
    __swig_getmethods__["no_user_id"] = _pygpgme._gpgme_op_import_result_no_user_id_get
    if _newclass:no_user_id = _swig_property(_pygpgme._gpgme_op_import_result_no_user_id_get, _pygpgme._gpgme_op_import_result_no_user_id_set)
    __swig_setmethods__["imported"] = _pygpgme._gpgme_op_import_result_imported_set
    __swig_getmethods__["imported"] = _pygpgme._gpgme_op_import_result_imported_get
    if _newclass:imported = _swig_property(_pygpgme._gpgme_op_import_result_imported_get, _pygpgme._gpgme_op_import_result_imported_set)
    __swig_setmethods__["imported_rsa"] = _pygpgme._gpgme_op_import_result_imported_rsa_set
    __swig_getmethods__["imported_rsa"] = _pygpgme._gpgme_op_import_result_imported_rsa_get
    if _newclass:imported_rsa = _swig_property(_pygpgme._gpgme_op_import_result_imported_rsa_get, _pygpgme._gpgme_op_import_result_imported_rsa_set)
    __swig_setmethods__["unchanged"] = _pygpgme._gpgme_op_import_result_unchanged_set
    __swig_getmethods__["unchanged"] = _pygpgme._gpgme_op_import_result_unchanged_get
    if _newclass:unchanged = _swig_property(_pygpgme._gpgme_op_import_result_unchanged_get, _pygpgme._gpgme_op_import_result_unchanged_set)
    __swig_setmethods__["new_user_ids"] = _pygpgme._gpgme_op_import_result_new_user_ids_set
    __swig_getmethods__["new_user_ids"] = _pygpgme._gpgme_op_import_result_new_user_ids_get
    if _newclass:new_user_ids = _swig_property(_pygpgme._gpgme_op_import_result_new_user_ids_get, _pygpgme._gpgme_op_import_result_new_user_ids_set)
    __swig_setmethods__["new_sub_keys"] = _pygpgme._gpgme_op_import_result_new_sub_keys_set
    __swig_getmethods__["new_sub_keys"] = _pygpgme._gpgme_op_import_result_new_sub_keys_get
    if _newclass:new_sub_keys = _swig_property(_pygpgme._gpgme_op_import_result_new_sub_keys_get, _pygpgme._gpgme_op_import_result_new_sub_keys_set)
    __swig_setmethods__["new_signatures"] = _pygpgme._gpgme_op_import_result_new_signatures_set
    __swig_getmethods__["new_signatures"] = _pygpgme._gpgme_op_import_result_new_signatures_get
    if _newclass:new_signatures = _swig_property(_pygpgme._gpgme_op_import_result_new_signatures_get, _pygpgme._gpgme_op_import_result_new_signatures_set)
    __swig_setmethods__["new_revocations"] = _pygpgme._gpgme_op_import_result_new_revocations_set
    __swig_getmethods__["new_revocations"] = _pygpgme._gpgme_op_import_result_new_revocations_get
    if _newclass:new_revocations = _swig_property(_pygpgme._gpgme_op_import_result_new_revocations_get, _pygpgme._gpgme_op_import_result_new_revocations_set)
    __swig_setmethods__["secret_read"] = _pygpgme._gpgme_op_import_result_secret_read_set
    __swig_getmethods__["secret_read"] = _pygpgme._gpgme_op_import_result_secret_read_get
    if _newclass:secret_read = _swig_property(_pygpgme._gpgme_op_import_result_secret_read_get, _pygpgme._gpgme_op_import_result_secret_read_set)
    __swig_setmethods__["secret_imported"] = _pygpgme._gpgme_op_import_result_secret_imported_set
    __swig_getmethods__["secret_imported"] = _pygpgme._gpgme_op_import_result_secret_imported_get
    if _newclass:secret_imported = _swig_property(_pygpgme._gpgme_op_import_result_secret_imported_get, _pygpgme._gpgme_op_import_result_secret_imported_set)
    __swig_setmethods__["secret_unchanged"] = _pygpgme._gpgme_op_import_result_secret_unchanged_set
    __swig_getmethods__["secret_unchanged"] = _pygpgme._gpgme_op_import_result_secret_unchanged_get
    if _newclass:secret_unchanged = _swig_property(_pygpgme._gpgme_op_import_result_secret_unchanged_get, _pygpgme._gpgme_op_import_result_secret_unchanged_set)
    __swig_setmethods__["skipped_new_keys"] = _pygpgme._gpgme_op_import_result_skipped_new_keys_set
    __swig_getmethods__["skipped_new_keys"] = _pygpgme._gpgme_op_import_result_skipped_new_keys_get
    if _newclass:skipped_new_keys = _swig_property(_pygpgme._gpgme_op_import_result_skipped_new_keys_get, _pygpgme._gpgme_op_import_result_skipped_new_keys_set)
    __swig_setmethods__["not_imported"] = _pygpgme._gpgme_op_import_result_not_imported_set
    __swig_getmethods__["not_imported"] = _pygpgme._gpgme_op_import_result_not_imported_get
    if _newclass:not_imported = _swig_property(_pygpgme._gpgme_op_import_result_not_imported_get, _pygpgme._gpgme_op_import_result_not_imported_set)
    __swig_setmethods__["imports"] = _pygpgme._gpgme_op_import_result_imports_set
    __swig_getmethods__["imports"] = _pygpgme._gpgme_op_import_result_imports_get
    if _newclass:imports = _swig_property(_pygpgme._gpgme_op_import_result_imports_get, _pygpgme._gpgme_op_import_result_imports_set)
    def __init__(self):
        """__init__(self) -> _gpgme_op_import_result"""
        this = _pygpgme.new__gpgme_op_import_result()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_op_import_result
    __del__ = lambda self : None;
_gpgme_op_import_result_swigregister = _pygpgme._gpgme_op_import_result_swigregister
_gpgme_op_import_result_swigregister(_gpgme_op_import_result)


def gpgme_op_import_result(*args):
  """gpgme_op_import_result(ctx) -> _gpgme_op_import_result"""
  return _pygpgme.gpgme_op_import_result(*args)

def gpgme_op_import_start(*args):
  """gpgme_op_import_start(ctx, keydata) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_import_start(*args)

def gpgme_op_import(*args):
  """gpgme_op_import(ctx, keydata) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_import(*args)

def gpgme_op_import_keys_start(*args):
  """gpgme_op_import_keys_start(ctx, keys) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_import_keys_start(*args)

def gpgme_op_import_keys(*args):
  """gpgme_op_import_keys(ctx, keys) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_import_keys(*args)

def gpgme_op_export_start(*args):
  """gpgme_op_export_start(ctx, pattern, mode, keydata) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_export_start(*args)

def gpgme_op_export(*args):
  """gpgme_op_export(ctx, pattern, mode, keydata) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_export(*args)

def gpgme_op_export_ext_start(*args):
  """gpgme_op_export_ext_start(ctx, pattern, mode, keydata) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_export_ext_start(*args)

def gpgme_op_export_ext(*args):
  """gpgme_op_export_ext(ctx, pattern, mode, keydata) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_export_ext(*args)

def gpgme_op_export_keys_start(*args):
  """gpgme_op_export_keys_start(ctx, keys, mode, keydata) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_export_keys_start(*args)

def gpgme_op_export_keys(*args):
  """gpgme_op_export_keys(ctx, keys, mode, keydata) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_export_keys(*args)
class _gpgme_op_genkey_result(_object):
    """Proxy of C _gpgme_op_genkey_result struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_op_genkey_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_op_genkey_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["primary"] = _pygpgme._gpgme_op_genkey_result_primary_set
    __swig_getmethods__["primary"] = _pygpgme._gpgme_op_genkey_result_primary_get
    if _newclass:primary = _swig_property(_pygpgme._gpgme_op_genkey_result_primary_get, _pygpgme._gpgme_op_genkey_result_primary_set)
    __swig_setmethods__["sub"] = _pygpgme._gpgme_op_genkey_result_sub_set
    __swig_getmethods__["sub"] = _pygpgme._gpgme_op_genkey_result_sub_get
    if _newclass:sub = _swig_property(_pygpgme._gpgme_op_genkey_result_sub_get, _pygpgme._gpgme_op_genkey_result_sub_set)
    __swig_setmethods__["_unused"] = _pygpgme._gpgme_op_genkey_result__unused_set
    __swig_getmethods__["_unused"] = _pygpgme._gpgme_op_genkey_result__unused_get
    if _newclass:_unused = _swig_property(_pygpgme._gpgme_op_genkey_result__unused_get, _pygpgme._gpgme_op_genkey_result__unused_set)
    __swig_setmethods__["fpr"] = _pygpgme._gpgme_op_genkey_result_fpr_set
    __swig_getmethods__["fpr"] = _pygpgme._gpgme_op_genkey_result_fpr_get
    if _newclass:fpr = _swig_property(_pygpgme._gpgme_op_genkey_result_fpr_get, _pygpgme._gpgme_op_genkey_result_fpr_set)
    def __init__(self):
        """__init__(self) -> _gpgme_op_genkey_result"""
        this = _pygpgme.new__gpgme_op_genkey_result()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_op_genkey_result
    __del__ = lambda self : None;
_gpgme_op_genkey_result_swigregister = _pygpgme._gpgme_op_genkey_result_swigregister
_gpgme_op_genkey_result_swigregister(_gpgme_op_genkey_result)


def gpgme_op_genkey_start(*args):
  """gpgme_op_genkey_start(ctx, parms, pubkey, seckey) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_genkey_start(*args)

def gpgme_op_genkey(*args):
  """gpgme_op_genkey(ctx, parms, pubkey, seckey) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_genkey(*args)

def gpgme_op_genkey_result(*args):
  """gpgme_op_genkey_result(ctx) -> _gpgme_op_genkey_result"""
  return _pygpgme.gpgme_op_genkey_result(*args)

def gpgme_op_delete_start(*args):
  """gpgme_op_delete_start(ctx, key, allow_secret) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_delete_start(*args)

def gpgme_op_delete(*args):
  """gpgme_op_delete(ctx, key, allow_secret) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_delete(*args)

def gpgme_op_edit_start(*args):
  """gpgme_op_edit_start(ctx, key, fnc, out) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_edit_start(*args)

def gpgme_op_edit(*args):
  """gpgme_op_edit(ctx, key, fnc, out) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_edit(*args)

def gpgme_op_card_edit_start(*args):
  """gpgme_op_card_edit_start(ctx, key, fnc, out) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_card_edit_start(*args)

def gpgme_op_card_edit(*args):
  """gpgme_op_card_edit(ctx, key, fnc, out) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_card_edit(*args)
class _gpgme_op_keylist_result(_object):
    """Proxy of C _gpgme_op_keylist_result struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_op_keylist_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_op_keylist_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["truncated"] = _pygpgme._gpgme_op_keylist_result_truncated_set
    __swig_getmethods__["truncated"] = _pygpgme._gpgme_op_keylist_result_truncated_get
    if _newclass:truncated = _swig_property(_pygpgme._gpgme_op_keylist_result_truncated_get, _pygpgme._gpgme_op_keylist_result_truncated_set)
    __swig_setmethods__["_unused"] = _pygpgme._gpgme_op_keylist_result__unused_set
    __swig_getmethods__["_unused"] = _pygpgme._gpgme_op_keylist_result__unused_get
    if _newclass:_unused = _swig_property(_pygpgme._gpgme_op_keylist_result__unused_get, _pygpgme._gpgme_op_keylist_result__unused_set)
    def __init__(self):
        """__init__(self) -> _gpgme_op_keylist_result"""
        this = _pygpgme.new__gpgme_op_keylist_result()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_op_keylist_result
    __del__ = lambda self : None;
_gpgme_op_keylist_result_swigregister = _pygpgme._gpgme_op_keylist_result_swigregister
_gpgme_op_keylist_result_swigregister(_gpgme_op_keylist_result)


def gpgme_op_keylist_result(*args):
  """gpgme_op_keylist_result(ctx) -> _gpgme_op_keylist_result"""
  return _pygpgme.gpgme_op_keylist_result(*args)

def gpgme_op_keylist_start(*args):
  """gpgme_op_keylist_start(ctx, pattern, secret_only) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_keylist_start(*args)

def gpgme_op_keylist_ext_start(*args):
  """gpgme_op_keylist_ext_start(ctx, pattern, secret_only, reserved) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_keylist_ext_start(*args)

def gpgme_op_keylist_next(*args):
  """gpgme_op_keylist_next(ctx, r_key) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_keylist_next(*args)

def gpgme_op_keylist_end(*args):
  """gpgme_op_keylist_end(ctx) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_keylist_end(*args)

def gpgme_op_passwd_start(*args):
  """gpgme_op_passwd_start(ctx, key, flags) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_passwd_start(*args)

def gpgme_op_passwd(*args):
  """gpgme_op_passwd(ctx, key, flags) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_passwd(*args)
class _gpgme_trust_item(_object):
    """Proxy of C _gpgme_trust_item struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_trust_item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_trust_item, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_refs"] = _pygpgme._gpgme_trust_item__refs_set
    __swig_getmethods__["_refs"] = _pygpgme._gpgme_trust_item__refs_get
    if _newclass:_refs = _swig_property(_pygpgme._gpgme_trust_item__refs_get, _pygpgme._gpgme_trust_item__refs_set)
    __swig_setmethods__["keyid"] = _pygpgme._gpgme_trust_item_keyid_set
    __swig_getmethods__["keyid"] = _pygpgme._gpgme_trust_item_keyid_get
    if _newclass:keyid = _swig_property(_pygpgme._gpgme_trust_item_keyid_get, _pygpgme._gpgme_trust_item_keyid_set)
    __swig_setmethods__["_keyid"] = _pygpgme._gpgme_trust_item__keyid_set
    __swig_getmethods__["_keyid"] = _pygpgme._gpgme_trust_item__keyid_get
    if _newclass:_keyid = _swig_property(_pygpgme._gpgme_trust_item__keyid_get, _pygpgme._gpgme_trust_item__keyid_set)
    __swig_setmethods__["type"] = _pygpgme._gpgme_trust_item_type_set
    __swig_getmethods__["type"] = _pygpgme._gpgme_trust_item_type_get
    if _newclass:type = _swig_property(_pygpgme._gpgme_trust_item_type_get, _pygpgme._gpgme_trust_item_type_set)
    __swig_setmethods__["level"] = _pygpgme._gpgme_trust_item_level_set
    __swig_getmethods__["level"] = _pygpgme._gpgme_trust_item_level_get
    if _newclass:level = _swig_property(_pygpgme._gpgme_trust_item_level_get, _pygpgme._gpgme_trust_item_level_set)
    __swig_setmethods__["owner_trust"] = _pygpgme._gpgme_trust_item_owner_trust_set
    __swig_getmethods__["owner_trust"] = _pygpgme._gpgme_trust_item_owner_trust_get
    if _newclass:owner_trust = _swig_property(_pygpgme._gpgme_trust_item_owner_trust_get, _pygpgme._gpgme_trust_item_owner_trust_set)
    __swig_setmethods__["_owner_trust"] = _pygpgme._gpgme_trust_item__owner_trust_set
    __swig_getmethods__["_owner_trust"] = _pygpgme._gpgme_trust_item__owner_trust_get
    if _newclass:_owner_trust = _swig_property(_pygpgme._gpgme_trust_item__owner_trust_get, _pygpgme._gpgme_trust_item__owner_trust_set)
    __swig_setmethods__["validity"] = _pygpgme._gpgme_trust_item_validity_set
    __swig_getmethods__["validity"] = _pygpgme._gpgme_trust_item_validity_get
    if _newclass:validity = _swig_property(_pygpgme._gpgme_trust_item_validity_get, _pygpgme._gpgme_trust_item_validity_set)
    __swig_setmethods__["_validity"] = _pygpgme._gpgme_trust_item__validity_set
    __swig_getmethods__["_validity"] = _pygpgme._gpgme_trust_item__validity_get
    if _newclass:_validity = _swig_property(_pygpgme._gpgme_trust_item__validity_get, _pygpgme._gpgme_trust_item__validity_set)
    __swig_setmethods__["name"] = _pygpgme._gpgme_trust_item_name_set
    __swig_getmethods__["name"] = _pygpgme._gpgme_trust_item_name_get
    if _newclass:name = _swig_property(_pygpgme._gpgme_trust_item_name_get, _pygpgme._gpgme_trust_item_name_set)
    def __init__(self):
        """__init__(self) -> _gpgme_trust_item"""
        this = _pygpgme.new__gpgme_trust_item()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_trust_item
    __del__ = lambda self : None;
_gpgme_trust_item_swigregister = _pygpgme._gpgme_trust_item_swigregister
_gpgme_trust_item_swigregister(_gpgme_trust_item)


def gpgme_op_trustlist_start(*args):
  """gpgme_op_trustlist_start(ctx, pattern, max_level) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_trustlist_start(*args)

def gpgme_op_trustlist_next(*args):
  """gpgme_op_trustlist_next(ctx, r_item) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_trustlist_next(*args)

def gpgme_op_trustlist_end(*args):
  """gpgme_op_trustlist_end(ctx) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_trustlist_end(*args)

def gpgme_trust_item_ref(*args):
  """gpgme_trust_item_ref(item)"""
  return _pygpgme.gpgme_trust_item_ref(*args)

def gpgme_trust_item_unref(*args):
  """gpgme_trust_item_unref(item)"""
  return _pygpgme.gpgme_trust_item_unref(*args)

def gpgme_op_getauditlog_start(*args):
  """gpgme_op_getauditlog_start(ctx, output, flags) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_getauditlog_start(*args)

def gpgme_op_getauditlog(*args):
  """gpgme_op_getauditlog(ctx, output, flags) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_getauditlog(*args)

def gpgme_op_assuan_transact_start(*args):
  """gpgme_op_assuan_transact_start(ctx, command, data_cb, data_cb_value, inq_cb, inq_cb_value, stat_cb, stat_cb_value) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_assuan_transact_start(*args)

def gpgme_op_assuan_transact_ext(*args):
  """
    gpgme_op_assuan_transact_ext(ctx, command, data_cb, data_cb_value, inq_cb, inq_cb_value, stat_cb, stat_cb_value,
        op_err) -> gpgme_error_t
    """
  return _pygpgme.gpgme_op_assuan_transact_ext(*args)
class _gpgme_op_assuan_result(_object):
    """Proxy of C _gpgme_op_assuan_result struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_op_assuan_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_op_assuan_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["err"] = _pygpgme._gpgme_op_assuan_result_err_set
    __swig_getmethods__["err"] = _pygpgme._gpgme_op_assuan_result_err_get
    if _newclass:err = _swig_property(_pygpgme._gpgme_op_assuan_result_err_get, _pygpgme._gpgme_op_assuan_result_err_set)
    def __init__(self):
        """__init__(self) -> _gpgme_op_assuan_result"""
        this = _pygpgme.new__gpgme_op_assuan_result()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_op_assuan_result
    __del__ = lambda self : None;
_gpgme_op_assuan_result_swigregister = _pygpgme._gpgme_op_assuan_result_swigregister
_gpgme_op_assuan_result_swigregister(_gpgme_op_assuan_result)

class _gpgme_op_vfs_mount_result(_object):
    """Proxy of C _gpgme_op_vfs_mount_result struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gpgme_op_vfs_mount_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gpgme_op_vfs_mount_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mount_dir"] = _pygpgme._gpgme_op_vfs_mount_result_mount_dir_set
    __swig_getmethods__["mount_dir"] = _pygpgme._gpgme_op_vfs_mount_result_mount_dir_get
    if _newclass:mount_dir = _swig_property(_pygpgme._gpgme_op_vfs_mount_result_mount_dir_get, _pygpgme._gpgme_op_vfs_mount_result_mount_dir_set)
    def __init__(self):
        """__init__(self) -> _gpgme_op_vfs_mount_result"""
        this = _pygpgme.new__gpgme_op_vfs_mount_result()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete__gpgme_op_vfs_mount_result
    __del__ = lambda self : None;
_gpgme_op_vfs_mount_result_swigregister = _pygpgme._gpgme_op_vfs_mount_result_swigregister
_gpgme_op_vfs_mount_result_swigregister(_gpgme_op_vfs_mount_result)


def gpgme_op_vfs_mount_result(*args):
  """gpgme_op_vfs_mount_result(ctx) -> _gpgme_op_vfs_mount_result"""
  return _pygpgme.gpgme_op_vfs_mount_result(*args)

def gpgme_op_vfs_mount(*args):
  """gpgme_op_vfs_mount(ctx, container_file, mount_dir, flags, op_err) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_vfs_mount(*args)

def gpgme_op_vfs_create(*args):
  """gpgme_op_vfs_create(ctx, recp, container_file, flags, op_err) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_vfs_create(*args)
GPGME_CONF_BASIC = _pygpgme.GPGME_CONF_BASIC
GPGME_CONF_ADVANCED = _pygpgme.GPGME_CONF_ADVANCED
GPGME_CONF_EXPERT = _pygpgme.GPGME_CONF_EXPERT
GPGME_CONF_INVISIBLE = _pygpgme.GPGME_CONF_INVISIBLE
GPGME_CONF_INTERNAL = _pygpgme.GPGME_CONF_INTERNAL
GPGME_CONF_NONE = _pygpgme.GPGME_CONF_NONE
GPGME_CONF_STRING = _pygpgme.GPGME_CONF_STRING
GPGME_CONF_INT32 = _pygpgme.GPGME_CONF_INT32
GPGME_CONF_UINT32 = _pygpgme.GPGME_CONF_UINT32
GPGME_CONF_FILENAME = _pygpgme.GPGME_CONF_FILENAME
GPGME_CONF_LDAP_SERVER = _pygpgme.GPGME_CONF_LDAP_SERVER
GPGME_CONF_KEY_FPR = _pygpgme.GPGME_CONF_KEY_FPR
GPGME_CONF_PUB_KEY = _pygpgme.GPGME_CONF_PUB_KEY
GPGME_CONF_SEC_KEY = _pygpgme.GPGME_CONF_SEC_KEY
GPGME_CONF_ALIAS_LIST = _pygpgme.GPGME_CONF_ALIAS_LIST
class gpgme_conf_arg(_object):
    """Proxy of C gpgme_conf_arg struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gpgme_conf_arg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gpgme_conf_arg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["no_arg"] = _pygpgme.gpgme_conf_arg_no_arg_set
    __swig_getmethods__["no_arg"] = _pygpgme.gpgme_conf_arg_no_arg_get
    if _newclass:no_arg = _swig_property(_pygpgme.gpgme_conf_arg_no_arg_get, _pygpgme.gpgme_conf_arg_no_arg_set)
    __swig_getmethods__["value"] = _pygpgme.gpgme_conf_arg_value_get
    if _newclass:value = _swig_property(_pygpgme.gpgme_conf_arg_value_get)
    def __init__(self):
        """__init__(self) -> gpgme_conf_arg"""
        this = _pygpgme.new_gpgme_conf_arg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete_gpgme_conf_arg
    __del__ = lambda self : None;
gpgme_conf_arg_swigregister = _pygpgme.gpgme_conf_arg_swigregister
gpgme_conf_arg_swigregister(gpgme_conf_arg)

class gpgme_conf_arg_value(_object):
    """Proxy of C gpgme_conf_arg_value struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gpgme_conf_arg_value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gpgme_conf_arg_value, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _pygpgme.gpgme_conf_arg_value_count_set
    __swig_getmethods__["count"] = _pygpgme.gpgme_conf_arg_value_count_get
    if _newclass:count = _swig_property(_pygpgme.gpgme_conf_arg_value_count_get, _pygpgme.gpgme_conf_arg_value_count_set)
    __swig_setmethods__["uint32"] = _pygpgme.gpgme_conf_arg_value_uint32_set
    __swig_getmethods__["uint32"] = _pygpgme.gpgme_conf_arg_value_uint32_get
    if _newclass:uint32 = _swig_property(_pygpgme.gpgme_conf_arg_value_uint32_get, _pygpgme.gpgme_conf_arg_value_uint32_set)
    __swig_setmethods__["int32"] = _pygpgme.gpgme_conf_arg_value_int32_set
    __swig_getmethods__["int32"] = _pygpgme.gpgme_conf_arg_value_int32_get
    if _newclass:int32 = _swig_property(_pygpgme.gpgme_conf_arg_value_int32_get, _pygpgme.gpgme_conf_arg_value_int32_set)
    __swig_setmethods__["string"] = _pygpgme.gpgme_conf_arg_value_string_set
    __swig_getmethods__["string"] = _pygpgme.gpgme_conf_arg_value_string_get
    if _newclass:string = _swig_property(_pygpgme.gpgme_conf_arg_value_string_get, _pygpgme.gpgme_conf_arg_value_string_set)
    def __init__(self):
        """__init__(self) -> gpgme_conf_arg_value"""
        this = _pygpgme.new_gpgme_conf_arg_value()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete_gpgme_conf_arg_value
    __del__ = lambda self : None;
gpgme_conf_arg_value_swigregister = _pygpgme.gpgme_conf_arg_value_swigregister
gpgme_conf_arg_value_swigregister(gpgme_conf_arg_value)

GPGME_CONF_GROUP = _pygpgme.GPGME_CONF_GROUP
GPGME_CONF_OPTIONAL = _pygpgme.GPGME_CONF_OPTIONAL
GPGME_CONF_LIST = _pygpgme.GPGME_CONF_LIST
GPGME_CONF_RUNTIME = _pygpgme.GPGME_CONF_RUNTIME
GPGME_CONF_DEFAULT = _pygpgme.GPGME_CONF_DEFAULT
GPGME_CONF_DEFAULT_DESC = _pygpgme.GPGME_CONF_DEFAULT_DESC
GPGME_CONF_NO_ARG_DESC = _pygpgme.GPGME_CONF_NO_ARG_DESC
GPGME_CONF_NO_CHANGE = _pygpgme.GPGME_CONF_NO_CHANGE
class gpgme_conf_opt(_object):
    """Proxy of C gpgme_conf_opt struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gpgme_conf_opt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gpgme_conf_opt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pygpgme.gpgme_conf_opt_name_set
    __swig_getmethods__["name"] = _pygpgme.gpgme_conf_opt_name_get
    if _newclass:name = _swig_property(_pygpgme.gpgme_conf_opt_name_get, _pygpgme.gpgme_conf_opt_name_set)
    __swig_setmethods__["flags"] = _pygpgme.gpgme_conf_opt_flags_set
    __swig_getmethods__["flags"] = _pygpgme.gpgme_conf_opt_flags_get
    if _newclass:flags = _swig_property(_pygpgme.gpgme_conf_opt_flags_get, _pygpgme.gpgme_conf_opt_flags_set)
    __swig_setmethods__["level"] = _pygpgme.gpgme_conf_opt_level_set
    __swig_getmethods__["level"] = _pygpgme.gpgme_conf_opt_level_get
    if _newclass:level = _swig_property(_pygpgme.gpgme_conf_opt_level_get, _pygpgme.gpgme_conf_opt_level_set)
    __swig_setmethods__["description"] = _pygpgme.gpgme_conf_opt_description_set
    __swig_getmethods__["description"] = _pygpgme.gpgme_conf_opt_description_get
    if _newclass:description = _swig_property(_pygpgme.gpgme_conf_opt_description_get, _pygpgme.gpgme_conf_opt_description_set)
    __swig_setmethods__["type"] = _pygpgme.gpgme_conf_opt_type_set
    __swig_getmethods__["type"] = _pygpgme.gpgme_conf_opt_type_get
    if _newclass:type = _swig_property(_pygpgme.gpgme_conf_opt_type_get, _pygpgme.gpgme_conf_opt_type_set)
    __swig_setmethods__["alt_type"] = _pygpgme.gpgme_conf_opt_alt_type_set
    __swig_getmethods__["alt_type"] = _pygpgme.gpgme_conf_opt_alt_type_get
    if _newclass:alt_type = _swig_property(_pygpgme.gpgme_conf_opt_alt_type_get, _pygpgme.gpgme_conf_opt_alt_type_set)
    __swig_setmethods__["argname"] = _pygpgme.gpgme_conf_opt_argname_set
    __swig_getmethods__["argname"] = _pygpgme.gpgme_conf_opt_argname_get
    if _newclass:argname = _swig_property(_pygpgme.gpgme_conf_opt_argname_get, _pygpgme.gpgme_conf_opt_argname_set)
    __swig_setmethods__["default_value"] = _pygpgme.gpgme_conf_opt_default_value_set
    __swig_getmethods__["default_value"] = _pygpgme.gpgme_conf_opt_default_value_get
    if _newclass:default_value = _swig_property(_pygpgme.gpgme_conf_opt_default_value_get, _pygpgme.gpgme_conf_opt_default_value_set)
    __swig_setmethods__["default_description"] = _pygpgme.gpgme_conf_opt_default_description_set
    __swig_getmethods__["default_description"] = _pygpgme.gpgme_conf_opt_default_description_get
    if _newclass:default_description = _swig_property(_pygpgme.gpgme_conf_opt_default_description_get, _pygpgme.gpgme_conf_opt_default_description_set)
    __swig_setmethods__["no_arg_value"] = _pygpgme.gpgme_conf_opt_no_arg_value_set
    __swig_getmethods__["no_arg_value"] = _pygpgme.gpgme_conf_opt_no_arg_value_get
    if _newclass:no_arg_value = _swig_property(_pygpgme.gpgme_conf_opt_no_arg_value_get, _pygpgme.gpgme_conf_opt_no_arg_value_set)
    __swig_setmethods__["no_arg_description"] = _pygpgme.gpgme_conf_opt_no_arg_description_set
    __swig_getmethods__["no_arg_description"] = _pygpgme.gpgme_conf_opt_no_arg_description_get
    if _newclass:no_arg_description = _swig_property(_pygpgme.gpgme_conf_opt_no_arg_description_get, _pygpgme.gpgme_conf_opt_no_arg_description_set)
    __swig_setmethods__["value"] = _pygpgme.gpgme_conf_opt_value_set
    __swig_getmethods__["value"] = _pygpgme.gpgme_conf_opt_value_get
    if _newclass:value = _swig_property(_pygpgme.gpgme_conf_opt_value_get, _pygpgme.gpgme_conf_opt_value_set)
    __swig_setmethods__["change_value"] = _pygpgme.gpgme_conf_opt_change_value_set
    __swig_getmethods__["change_value"] = _pygpgme.gpgme_conf_opt_change_value_get
    if _newclass:change_value = _swig_property(_pygpgme.gpgme_conf_opt_change_value_get, _pygpgme.gpgme_conf_opt_change_value_set)
    __swig_setmethods__["new_value"] = _pygpgme.gpgme_conf_opt_new_value_set
    __swig_getmethods__["new_value"] = _pygpgme.gpgme_conf_opt_new_value_get
    if _newclass:new_value = _swig_property(_pygpgme.gpgme_conf_opt_new_value_get, _pygpgme.gpgme_conf_opt_new_value_set)
    __swig_setmethods__["user_data"] = _pygpgme.gpgme_conf_opt_user_data_set
    __swig_getmethods__["user_data"] = _pygpgme.gpgme_conf_opt_user_data_get
    if _newclass:user_data = _swig_property(_pygpgme.gpgme_conf_opt_user_data_get, _pygpgme.gpgme_conf_opt_user_data_set)
    def __init__(self):
        """__init__(self) -> gpgme_conf_opt"""
        this = _pygpgme.new_gpgme_conf_opt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete_gpgme_conf_opt
    __del__ = lambda self : None;
gpgme_conf_opt_swigregister = _pygpgme.gpgme_conf_opt_swigregister
gpgme_conf_opt_swigregister(gpgme_conf_opt)

class gpgme_conf_comp(_object):
    """Proxy of C gpgme_conf_comp struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gpgme_conf_comp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gpgme_conf_comp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_last_opt_p"] = _pygpgme.gpgme_conf_comp__last_opt_p_set
    __swig_getmethods__["_last_opt_p"] = _pygpgme.gpgme_conf_comp__last_opt_p_get
    if _newclass:_last_opt_p = _swig_property(_pygpgme.gpgme_conf_comp__last_opt_p_get, _pygpgme.gpgme_conf_comp__last_opt_p_set)
    __swig_setmethods__["name"] = _pygpgme.gpgme_conf_comp_name_set
    __swig_getmethods__["name"] = _pygpgme.gpgme_conf_comp_name_get
    if _newclass:name = _swig_property(_pygpgme.gpgme_conf_comp_name_get, _pygpgme.gpgme_conf_comp_name_set)
    __swig_setmethods__["description"] = _pygpgme.gpgme_conf_comp_description_set
    __swig_getmethods__["description"] = _pygpgme.gpgme_conf_comp_description_get
    if _newclass:description = _swig_property(_pygpgme.gpgme_conf_comp_description_get, _pygpgme.gpgme_conf_comp_description_set)
    __swig_setmethods__["program_name"] = _pygpgme.gpgme_conf_comp_program_name_set
    __swig_getmethods__["program_name"] = _pygpgme.gpgme_conf_comp_program_name_get
    if _newclass:program_name = _swig_property(_pygpgme.gpgme_conf_comp_program_name_get, _pygpgme.gpgme_conf_comp_program_name_set)
    __swig_setmethods__["options"] = _pygpgme.gpgme_conf_comp_options_set
    __swig_getmethods__["options"] = _pygpgme.gpgme_conf_comp_options_get
    if _newclass:options = _swig_property(_pygpgme.gpgme_conf_comp_options_get, _pygpgme.gpgme_conf_comp_options_set)
    def __init__(self):
        """__init__(self) -> gpgme_conf_comp"""
        this = _pygpgme.new_gpgme_conf_comp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pygpgme.delete_gpgme_conf_comp
    __del__ = lambda self : None;
gpgme_conf_comp_swigregister = _pygpgme.gpgme_conf_comp_swigregister
gpgme_conf_comp_swigregister(gpgme_conf_comp)


def gpgme_conf_arg_new(*args):
  """gpgme_conf_arg_new(arg_p, type, value) -> gpgme_error_t"""
  return _pygpgme.gpgme_conf_arg_new(*args)

def gpgme_conf_arg_release(*args):
  """gpgme_conf_arg_release(arg, type)"""
  return _pygpgme.gpgme_conf_arg_release(*args)

def gpgme_conf_opt_change(*args):
  """gpgme_conf_opt_change(opt, reset, arg) -> gpgme_error_t"""
  return _pygpgme.gpgme_conf_opt_change(*args)

def gpgme_conf_release(*args):
  """gpgme_conf_release(conf)"""
  return _pygpgme.gpgme_conf_release(*args)

def gpgme_op_conf_load(*args):
  """gpgme_op_conf_load(ctx, conf_p) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_conf_load(*args)

def gpgme_op_conf_save(*args):
  """gpgme_op_conf_save(ctx, comp) -> gpgme_error_t"""
  return _pygpgme.gpgme_op_conf_save(*args)

def gpgme_key_from_uid(*args):
  """gpgme_key_from_uid(key, name) -> gpgme_error_t"""
  return _pygpgme.gpgme_key_from_uid(*args)

def gpgme_check_version(*args):
  """gpgme_check_version(req_version) -> char const *"""
  return _pygpgme.gpgme_check_version(*args)

def gpgme_check_version_internal(*args):
  """gpgme_check_version_internal(req_version, offset_sig_validity) -> char const *"""
  return _pygpgme.gpgme_check_version_internal(*args)

def gpgme_get_engine_info(*args):
  """gpgme_get_engine_info(engine_info) -> gpgme_error_t"""
  return _pygpgme.gpgme_get_engine_info(*args)

def gpgme_set_engine_info(*args):
  """gpgme_set_engine_info(proto, file_name, home_dir) -> gpgme_error_t"""
  return _pygpgme.gpgme_set_engine_info(*args)

def gpgme_engine_check_version(*args):
  """gpgme_engine_check_version(proto) -> gpgme_error_t"""
  return _pygpgme.gpgme_engine_check_version(*args)

def gpgme_result_ref(*args):
  """gpgme_result_ref(result)"""
  return _pygpgme.gpgme_result_ref(*args)

def gpgme_result_unref(*args):
  """gpgme_result_unref(result)"""
  return _pygpgme.gpgme_result_unref(*args)
EOF = _pygpgme.EOF

def new_gpgme_ctx_t_p():
  """new_gpgme_ctx_t_p() -> gpgme_ctx_t *"""
  return _pygpgme.new_gpgme_ctx_t_p()

def copy_gpgme_ctx_t_p(*args):
  """copy_gpgme_ctx_t_p(value) -> gpgme_ctx_t *"""
  return _pygpgme.copy_gpgme_ctx_t_p(*args)

def delete_gpgme_ctx_t_p(*args):
  """delete_gpgme_ctx_t_p(obj)"""
  return _pygpgme.delete_gpgme_ctx_t_p(*args)

def gpgme_ctx_t_p_assign(*args):
  """gpgme_ctx_t_p_assign(obj, value)"""
  return _pygpgme.gpgme_ctx_t_p_assign(*args)

def gpgme_ctx_t_p_value(*args):
  """gpgme_ctx_t_p_value(obj) -> gpgme_ctx_t"""
  return _pygpgme.gpgme_ctx_t_p_value(*args)

def new_gpgme_data_t_p():
  """new_gpgme_data_t_p() -> gpgme_data_t *"""
  return _pygpgme.new_gpgme_data_t_p()

def copy_gpgme_data_t_p(*args):
  """copy_gpgme_data_t_p(value) -> gpgme_data_t *"""
  return _pygpgme.copy_gpgme_data_t_p(*args)

def delete_gpgme_data_t_p(*args):
  """delete_gpgme_data_t_p(obj)"""
  return _pygpgme.delete_gpgme_data_t_p(*args)

def gpgme_data_t_p_assign(*args):
  """gpgme_data_t_p_assign(obj, value)"""
  return _pygpgme.gpgme_data_t_p_assign(*args)

def gpgme_data_t_p_value(*args):
  """gpgme_data_t_p_value(obj) -> gpgme_data_t"""
  return _pygpgme.gpgme_data_t_p_value(*args)

def new_gpgme_key_t_p():
  """new_gpgme_key_t_p() -> gpgme_key_t *"""
  return _pygpgme.new_gpgme_key_t_p()

def copy_gpgme_key_t_p(*args):
  """copy_gpgme_key_t_p(value) -> gpgme_key_t *"""
  return _pygpgme.copy_gpgme_key_t_p(*args)

def delete_gpgme_key_t_p(*args):
  """delete_gpgme_key_t_p(obj)"""
  return _pygpgme.delete_gpgme_key_t_p(*args)

def gpgme_key_t_p_assign(*args):
  """gpgme_key_t_p_assign(obj, value)"""
  return _pygpgme.gpgme_key_t_p_assign(*args)

def gpgme_key_t_p_value(*args):
  """gpgme_key_t_p_value(obj) -> _gpgme_key"""
  return _pygpgme.gpgme_key_t_p_value(*args)

def new_gpgme_error_t_p():
  """new_gpgme_error_t_p() -> gpgme_error_t *"""
  return _pygpgme.new_gpgme_error_t_p()

def copy_gpgme_error_t_p(*args):
  """copy_gpgme_error_t_p(value) -> gpgme_error_t *"""
  return _pygpgme.copy_gpgme_error_t_p(*args)

def delete_gpgme_error_t_p(*args):
  """delete_gpgme_error_t_p(obj)"""
  return _pygpgme.delete_gpgme_error_t_p(*args)

def gpgme_error_t_p_assign(*args):
  """gpgme_error_t_p_assign(obj, value)"""
  return _pygpgme.gpgme_error_t_p_assign(*args)

def gpgme_error_t_p_value(*args):
  """gpgme_error_t_p_value(obj) -> gpgme_error_t"""
  return _pygpgme.gpgme_error_t_p_value(*args)

def new_gpgme_trust_item_t_p():
  """new_gpgme_trust_item_t_p() -> gpgme_trust_item_t *"""
  return _pygpgme.new_gpgme_trust_item_t_p()

def copy_gpgme_trust_item_t_p(*args):
  """copy_gpgme_trust_item_t_p(value) -> gpgme_trust_item_t *"""
  return _pygpgme.copy_gpgme_trust_item_t_p(*args)

def delete_gpgme_trust_item_t_p(*args):
  """delete_gpgme_trust_item_t_p(obj)"""
  return _pygpgme.delete_gpgme_trust_item_t_p(*args)

def gpgme_trust_item_t_p_assign(*args):
  """gpgme_trust_item_t_p_assign(obj, value)"""
  return _pygpgme.gpgme_trust_item_t_p_assign(*args)

def gpgme_trust_item_t_p_value(*args):
  """gpgme_trust_item_t_p_value(obj) -> _gpgme_trust_item"""
  return _pygpgme.gpgme_trust_item_t_p_value(*args)

def new_gpgme_engine_info_t_p():
  """new_gpgme_engine_info_t_p() -> gpgme_engine_info_t *"""
  return _pygpgme.new_gpgme_engine_info_t_p()

def copy_gpgme_engine_info_t_p(*args):
  """copy_gpgme_engine_info_t_p(value) -> gpgme_engine_info_t *"""
  return _pygpgme.copy_gpgme_engine_info_t_p(*args)

def delete_gpgme_engine_info_t_p(*args):
  """delete_gpgme_engine_info_t_p(obj)"""
  return _pygpgme.delete_gpgme_engine_info_t_p(*args)

def gpgme_engine_info_t_p_assign(*args):
  """gpgme_engine_info_t_p_assign(obj, value)"""
  return _pygpgme.gpgme_engine_info_t_p_assign(*args)

def gpgme_engine_info_t_p_value(*args):
  """gpgme_engine_info_t_p_value(obj) -> _gpgme_engine_info"""
  return _pygpgme.gpgme_engine_info_t_p_value(*args)

def new_PyObject_p_p():
  """new_PyObject_p_p() -> PyObject **"""
  return _pygpgme.new_PyObject_p_p()

def copy_PyObject_p_p(*args):
  """copy_PyObject_p_p(value) -> PyObject **"""
  return _pygpgme.copy_PyObject_p_p(*args)

def delete_PyObject_p_p(*args):
  """delete_PyObject_p_p(obj)"""
  return _pygpgme.delete_PyObject_p_p(*args)

def PyObject_p_p_assign(*args):
  """PyObject_p_p_assign(obj, value)"""
  return _pygpgme.PyObject_p_p_assign(*args)

def PyObject_p_p_value(*args):
  """PyObject_p_p_value(obj) -> PyObject *"""
  return _pygpgme.PyObject_p_p_value(*args)

def new_void_p_p():
  """new_void_p_p() -> void **"""
  return _pygpgme.new_void_p_p()

def copy_void_p_p(*args):
  """copy_void_p_p(value) -> void **"""
  return _pygpgme.copy_void_p_p(*args)

def delete_void_p_p(*args):
  """delete_void_p_p(obj)"""
  return _pygpgme.delete_void_p_p(*args)

def void_p_p_assign(*args):
  """void_p_p_assign(obj, value)"""
  return _pygpgme.void_p_p_assign(*args)

def void_p_p_value(*args):
  """void_p_p_value(obj) -> void *"""
  return _pygpgme.void_p_p_value(*args)

def fdopen(*args):
  """fdopen(fildes, mode) -> FILE *"""
  return _pygpgme.fdopen(*args)

def pygpgme_exception_init():
  """pygpgme_exception_init()"""
  return _pygpgme.pygpgme_exception_init()

def pygpgme_exception2code():
  """pygpgme_exception2code() -> gpgme_error_t"""
  return _pygpgme.pygpgme_exception2code()

def pygpgme_clear_generic_cb(*args):
  """pygpgme_clear_generic_cb(cb)"""
  return _pygpgme.pygpgme_clear_generic_cb(*args)

def pygpgme_set_passphrase_cb(*args):
  """pygpgme_set_passphrase_cb(ctx, cb, freelater)"""
  return _pygpgme.pygpgme_set_passphrase_cb(*args)

def pygpgme_set_progress_cb(*args):
  """pygpgme_set_progress_cb(ctx, cb, freelater)"""
  return _pygpgme.pygpgme_set_progress_cb(*args)
# This file is compatible with both classic and new-style classes.
