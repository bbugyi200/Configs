@here I've been working on a script that loads pylint's output into a pandas dataframe. You should be able to run it with `python ~bbugyi/ipylint`, which will open up an embeded instance of ipython. Once inside ipython, the pylint output data should have already been loaded into a variable named `df`.

My hope is that this script will make it easier to assess what each pylint check is actually looking for. For example, if you weren't sure how the W0102 (dangerous-default-value) check was interacting with our codebase, you could run `df.chk("w102").snips()` to print out code snippets from our codebase where the rules of that check were violated. @hin and anyone else with a light terminal should use the `lsnips()` method instead of the `snips()` method.

I am planning on using ipylint to help me present the first set of pylint checks on our next team meeting (10/25/2019), but it would be useful if everyone already had an idea of which checks they agree/disagree with before the meeting. The checks I think we should discuss first are all of the (E)rror and (W)arning checks that belong to the "basic" checker. These can be accessed from ipylint via `df.checker("basic").lvl("w", "e")`. For a full description of everything you can do with `df`, run `help(df)` once inside ipython.
